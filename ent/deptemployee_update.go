// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"employees/ent/department"
	"employees/ent/deptemployee"
	"employees/ent/employee"
	"employees/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeptEmployeeUpdate is the builder for updating DeptEmployee entities.
type DeptEmployeeUpdate struct {
	config
	hooks    []Hook
	mutation *DeptEmployeeMutation
}

// Where appends a list predicates to the DeptEmployeeUpdate builder.
func (deu *DeptEmployeeUpdate) Where(ps ...predicate.DeptEmployee) *DeptEmployeeUpdate {
	deu.mutation.Where(ps...)
	return deu
}

// SetEmployeeID sets the "employee_id" field.
func (deu *DeptEmployeeUpdate) SetEmployeeID(s string) *DeptEmployeeUpdate {
	deu.mutation.SetEmployeeID(s)
	return deu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (deu *DeptEmployeeUpdate) SetNillableEmployeeID(s *string) *DeptEmployeeUpdate {
	if s != nil {
		deu.SetEmployeeID(*s)
	}
	return deu
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (deu *DeptEmployeeUpdate) ClearEmployeeID() *DeptEmployeeUpdate {
	deu.mutation.ClearEmployeeID()
	return deu
}

// SetDepartmentID sets the "department_id" field.
func (deu *DeptEmployeeUpdate) SetDepartmentID(s string) *DeptEmployeeUpdate {
	deu.mutation.SetDepartmentID(s)
	return deu
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (deu *DeptEmployeeUpdate) SetNillableDepartmentID(s *string) *DeptEmployeeUpdate {
	if s != nil {
		deu.SetDepartmentID(*s)
	}
	return deu
}

// ClearDepartmentID clears the value of the "department_id" field.
func (deu *DeptEmployeeUpdate) ClearDepartmentID() *DeptEmployeeUpdate {
	deu.mutation.ClearDepartmentID()
	return deu
}

// SetFromDate sets the "from_date" field.
func (deu *DeptEmployeeUpdate) SetFromDate(t time.Time) *DeptEmployeeUpdate {
	deu.mutation.SetFromDate(t)
	return deu
}

// SetToDate sets the "to_date" field.
func (deu *DeptEmployeeUpdate) SetToDate(t time.Time) *DeptEmployeeUpdate {
	deu.mutation.SetToDate(t)
	return deu
}

// SetCreatedAt sets the "created_at" field.
func (deu *DeptEmployeeUpdate) SetCreatedAt(t time.Time) *DeptEmployeeUpdate {
	deu.mutation.SetCreatedAt(t)
	return deu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (deu *DeptEmployeeUpdate) SetNillableCreatedAt(t *time.Time) *DeptEmployeeUpdate {
	if t != nil {
		deu.SetCreatedAt(*t)
	}
	return deu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (deu *DeptEmployeeUpdate) ClearCreatedAt() *DeptEmployeeUpdate {
	deu.mutation.ClearCreatedAt()
	return deu
}

// SetUpdatedAt sets the "updated_at" field.
func (deu *DeptEmployeeUpdate) SetUpdatedAt(t time.Time) *DeptEmployeeUpdate {
	deu.mutation.SetUpdatedAt(t)
	return deu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (deu *DeptEmployeeUpdate) SetNillableUpdatedAt(t *time.Time) *DeptEmployeeUpdate {
	if t != nil {
		deu.SetUpdatedAt(*t)
	}
	return deu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (deu *DeptEmployeeUpdate) ClearUpdatedAt() *DeptEmployeeUpdate {
	deu.mutation.ClearUpdatedAt()
	return deu
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (deu *DeptEmployeeUpdate) SetEmployee(e *Employee) *DeptEmployeeUpdate {
	return deu.SetEmployeeID(e.ID)
}

// SetDepartment sets the "department" edge to the Department entity.
func (deu *DeptEmployeeUpdate) SetDepartment(d *Department) *DeptEmployeeUpdate {
	return deu.SetDepartmentID(d.ID)
}

// Mutation returns the DeptEmployeeMutation object of the builder.
func (deu *DeptEmployeeUpdate) Mutation() *DeptEmployeeMutation {
	return deu.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (deu *DeptEmployeeUpdate) ClearEmployee() *DeptEmployeeUpdate {
	deu.mutation.ClearEmployee()
	return deu
}

// ClearDepartment clears the "department" edge to the Department entity.
func (deu *DeptEmployeeUpdate) ClearDepartment() *DeptEmployeeUpdate {
	deu.mutation.ClearDepartment()
	return deu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (deu *DeptEmployeeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, deu.sqlSave, deu.mutation, deu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (deu *DeptEmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := deu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (deu *DeptEmployeeUpdate) Exec(ctx context.Context) error {
	_, err := deu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (deu *DeptEmployeeUpdate) ExecX(ctx context.Context) {
	if err := deu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (deu *DeptEmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(deptemployee.Table, deptemployee.Columns, sqlgraph.NewFieldSpec(deptemployee.FieldID, field.TypeString))
	if ps := deu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := deu.mutation.FromDate(); ok {
		_spec.SetField(deptemployee.FieldFromDate, field.TypeTime, value)
	}
	if value, ok := deu.mutation.ToDate(); ok {
		_spec.SetField(deptemployee.FieldToDate, field.TypeTime, value)
	}
	if value, ok := deu.mutation.CreatedAt(); ok {
		_spec.SetField(deptemployee.FieldCreatedAt, field.TypeTime, value)
	}
	if deu.mutation.CreatedAtCleared() {
		_spec.ClearField(deptemployee.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := deu.mutation.UpdatedAt(); ok {
		_spec.SetField(deptemployee.FieldUpdatedAt, field.TypeTime, value)
	}
	if deu.mutation.UpdatedAtCleared() {
		_spec.ClearField(deptemployee.FieldUpdatedAt, field.TypeTime)
	}
	if deu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptemployee.EmployeeTable,
			Columns: []string{deptemployee.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptemployee.EmployeeTable,
			Columns: []string{deptemployee.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if deu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptemployee.DepartmentTable,
			Columns: []string{deptemployee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptemployee.DepartmentTable,
			Columns: []string{deptemployee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, deu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deptemployee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	deu.mutation.done = true
	return n, nil
}

// DeptEmployeeUpdateOne is the builder for updating a single DeptEmployee entity.
type DeptEmployeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeptEmployeeMutation
}

// SetEmployeeID sets the "employee_id" field.
func (deuo *DeptEmployeeUpdateOne) SetEmployeeID(s string) *DeptEmployeeUpdateOne {
	deuo.mutation.SetEmployeeID(s)
	return deuo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (deuo *DeptEmployeeUpdateOne) SetNillableEmployeeID(s *string) *DeptEmployeeUpdateOne {
	if s != nil {
		deuo.SetEmployeeID(*s)
	}
	return deuo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (deuo *DeptEmployeeUpdateOne) ClearEmployeeID() *DeptEmployeeUpdateOne {
	deuo.mutation.ClearEmployeeID()
	return deuo
}

// SetDepartmentID sets the "department_id" field.
func (deuo *DeptEmployeeUpdateOne) SetDepartmentID(s string) *DeptEmployeeUpdateOne {
	deuo.mutation.SetDepartmentID(s)
	return deuo
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (deuo *DeptEmployeeUpdateOne) SetNillableDepartmentID(s *string) *DeptEmployeeUpdateOne {
	if s != nil {
		deuo.SetDepartmentID(*s)
	}
	return deuo
}

// ClearDepartmentID clears the value of the "department_id" field.
func (deuo *DeptEmployeeUpdateOne) ClearDepartmentID() *DeptEmployeeUpdateOne {
	deuo.mutation.ClearDepartmentID()
	return deuo
}

// SetFromDate sets the "from_date" field.
func (deuo *DeptEmployeeUpdateOne) SetFromDate(t time.Time) *DeptEmployeeUpdateOne {
	deuo.mutation.SetFromDate(t)
	return deuo
}

// SetToDate sets the "to_date" field.
func (deuo *DeptEmployeeUpdateOne) SetToDate(t time.Time) *DeptEmployeeUpdateOne {
	deuo.mutation.SetToDate(t)
	return deuo
}

// SetCreatedAt sets the "created_at" field.
func (deuo *DeptEmployeeUpdateOne) SetCreatedAt(t time.Time) *DeptEmployeeUpdateOne {
	deuo.mutation.SetCreatedAt(t)
	return deuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (deuo *DeptEmployeeUpdateOne) SetNillableCreatedAt(t *time.Time) *DeptEmployeeUpdateOne {
	if t != nil {
		deuo.SetCreatedAt(*t)
	}
	return deuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (deuo *DeptEmployeeUpdateOne) ClearCreatedAt() *DeptEmployeeUpdateOne {
	deuo.mutation.ClearCreatedAt()
	return deuo
}

// SetUpdatedAt sets the "updated_at" field.
func (deuo *DeptEmployeeUpdateOne) SetUpdatedAt(t time.Time) *DeptEmployeeUpdateOne {
	deuo.mutation.SetUpdatedAt(t)
	return deuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (deuo *DeptEmployeeUpdateOne) SetNillableUpdatedAt(t *time.Time) *DeptEmployeeUpdateOne {
	if t != nil {
		deuo.SetUpdatedAt(*t)
	}
	return deuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (deuo *DeptEmployeeUpdateOne) ClearUpdatedAt() *DeptEmployeeUpdateOne {
	deuo.mutation.ClearUpdatedAt()
	return deuo
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (deuo *DeptEmployeeUpdateOne) SetEmployee(e *Employee) *DeptEmployeeUpdateOne {
	return deuo.SetEmployeeID(e.ID)
}

// SetDepartment sets the "department" edge to the Department entity.
func (deuo *DeptEmployeeUpdateOne) SetDepartment(d *Department) *DeptEmployeeUpdateOne {
	return deuo.SetDepartmentID(d.ID)
}

// Mutation returns the DeptEmployeeMutation object of the builder.
func (deuo *DeptEmployeeUpdateOne) Mutation() *DeptEmployeeMutation {
	return deuo.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (deuo *DeptEmployeeUpdateOne) ClearEmployee() *DeptEmployeeUpdateOne {
	deuo.mutation.ClearEmployee()
	return deuo
}

// ClearDepartment clears the "department" edge to the Department entity.
func (deuo *DeptEmployeeUpdateOne) ClearDepartment() *DeptEmployeeUpdateOne {
	deuo.mutation.ClearDepartment()
	return deuo
}

// Where appends a list predicates to the DeptEmployeeUpdate builder.
func (deuo *DeptEmployeeUpdateOne) Where(ps ...predicate.DeptEmployee) *DeptEmployeeUpdateOne {
	deuo.mutation.Where(ps...)
	return deuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (deuo *DeptEmployeeUpdateOne) Select(field string, fields ...string) *DeptEmployeeUpdateOne {
	deuo.fields = append([]string{field}, fields...)
	return deuo
}

// Save executes the query and returns the updated DeptEmployee entity.
func (deuo *DeptEmployeeUpdateOne) Save(ctx context.Context) (*DeptEmployee, error) {
	return withHooks(ctx, deuo.sqlSave, deuo.mutation, deuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (deuo *DeptEmployeeUpdateOne) SaveX(ctx context.Context) *DeptEmployee {
	node, err := deuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (deuo *DeptEmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := deuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (deuo *DeptEmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := deuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (deuo *DeptEmployeeUpdateOne) sqlSave(ctx context.Context) (_node *DeptEmployee, err error) {
	_spec := sqlgraph.NewUpdateSpec(deptemployee.Table, deptemployee.Columns, sqlgraph.NewFieldSpec(deptemployee.FieldID, field.TypeString))
	id, ok := deuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeptEmployee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := deuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deptemployee.FieldID)
		for _, f := range fields {
			if !deptemployee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deptemployee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := deuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := deuo.mutation.FromDate(); ok {
		_spec.SetField(deptemployee.FieldFromDate, field.TypeTime, value)
	}
	if value, ok := deuo.mutation.ToDate(); ok {
		_spec.SetField(deptemployee.FieldToDate, field.TypeTime, value)
	}
	if value, ok := deuo.mutation.CreatedAt(); ok {
		_spec.SetField(deptemployee.FieldCreatedAt, field.TypeTime, value)
	}
	if deuo.mutation.CreatedAtCleared() {
		_spec.ClearField(deptemployee.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := deuo.mutation.UpdatedAt(); ok {
		_spec.SetField(deptemployee.FieldUpdatedAt, field.TypeTime, value)
	}
	if deuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(deptemployee.FieldUpdatedAt, field.TypeTime)
	}
	if deuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptemployee.EmployeeTable,
			Columns: []string{deptemployee.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptemployee.EmployeeTable,
			Columns: []string{deptemployee.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if deuo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptemployee.DepartmentTable,
			Columns: []string{deptemployee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptemployee.DepartmentTable,
			Columns: []string{deptemployee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeptEmployee{config: deuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, deuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deptemployee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	deuo.mutation.done = true
	return _node, nil
}
