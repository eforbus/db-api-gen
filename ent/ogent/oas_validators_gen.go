// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *CreateEmployeeReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Gender.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CreateEmployeeReqGender) Validate() error {
	switch s {
	case "M":
		return nil
	case "F":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *DeptEmployeeEmployeeRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Gender.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DeptEmployeeEmployeeReadGender) Validate() error {
	switch s {
	case "M":
		return nil
	case "F":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *DeptManagerEmployeeRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Gender.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DeptManagerEmployeeReadGender) Validate() error {
	switch s {
	case "M":
		return nil
	case "F":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *EmployeeCreate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Gender.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EmployeeCreateGender) Validate() error {
	switch s {
	case "M":
		return nil
	case "F":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *EmployeeList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Gender.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EmployeeListGender) Validate() error {
	switch s {
	case "M":
		return nil
	case "F":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *EmployeeRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Gender.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EmployeeReadGender) Validate() error {
	switch s {
	case "M":
		return nil
	case "F":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *EmployeeUpdate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Gender.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EmployeeUpdateGender) Validate() error {
	switch s {
	case "M":
		return nil
	case "F":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ListDepartmentDeptEmployeesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListDepartmentDeptManagersOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListDepartmentOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListDeptEmployeeOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListDeptManagerOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListEmployeeDeptEmployeesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListEmployeeDeptManagersOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListEmployeeOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ListEmployeeSalariesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListEmployeeTitlesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListSalaryOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListTitleOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *SalaryEmployeeRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Gender.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SalaryEmployeeReadGender) Validate() error {
	switch s {
	case "M":
		return nil
	case "F":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *TitleEmployeeRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Gender.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TitleEmployeeReadGender) Validate() error {
	switch s {
	case "M":
		return nil
	case "F":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *UpdateEmployeeReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Gender.Set {
			if err := func() error {
				if err := s.Gender.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UpdateEmployeeReqGender) Validate() error {
	switch s {
	case "M":
		return nil
	case "F":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
