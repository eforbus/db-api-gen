// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'd': // Prefix: "dep"
				if l := len("dep"); len(elem) >= l && elem[0:l] == "dep" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "artments"
					if l := len("artments"); len(elem) >= l && elem[0:l] == "artments" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListDepartmentRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateDepartmentRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteDepartmentRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadDepartmentRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateDepartmentRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/dept-"
							if l := len("/dept-"); len(elem) >= l && elem[0:l] == "/dept-" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "employees"
								if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListDepartmentDeptEmployeesRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'm': // Prefix: "managers"
								if l := len("managers"); len(elem) >= l && elem[0:l] == "managers" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListDepartmentDeptManagersRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				case 't': // Prefix: "t-"
					if l := len("t-"); len(elem) >= l && elem[0:l] == "t-" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "employees"
						if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListDeptEmployeeRequest([0]string{}, w, r)
							case "POST":
								s.handleCreateDeptEmployeeRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleDeleteDeptEmployeeRequest([1]string{
										args[0],
									}, w, r)
								case "GET":
									s.handleReadDeptEmployeeRequest([1]string{
										args[0],
									}, w, r)
								case "PATCH":
									s.handleUpdateDeptEmployeeRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "department"
									if l := len("department"); len(elem) >= l && elem[0:l] == "department" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleReadDeptEmployeeDepartmentRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'e': // Prefix: "employee"
									if l := len("employee"); len(elem) >= l && elem[0:l] == "employee" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleReadDeptEmployeeEmployeeRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						}
					case 'm': // Prefix: "managers"
						if l := len("managers"); len(elem) >= l && elem[0:l] == "managers" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListDeptManagerRequest([0]string{}, w, r)
							case "POST":
								s.handleCreateDeptManagerRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleDeleteDeptManagerRequest([1]string{
										args[0],
									}, w, r)
								case "GET":
									s.handleReadDeptManagerRequest([1]string{
										args[0],
									}, w, r)
								case "PATCH":
									s.handleUpdateDeptManagerRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "department"
									if l := len("department"); len(elem) >= l && elem[0:l] == "department" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleReadDeptManagerDepartmentRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'e': // Prefix: "employee"
									if l := len("employee"); len(elem) >= l && elem[0:l] == "employee" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleReadDeptManagerEmployeeRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						}
					}
				}
			case 'e': // Prefix: "employees"
				if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListEmployeeRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateEmployeeRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteEmployeeRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadEmployeeRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateEmployeeRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "dept-"
							if l := len("dept-"); len(elem) >= l && elem[0:l] == "dept-" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "employees"
								if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListEmployeeDeptEmployeesRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'm': // Prefix: "managers"
								if l := len("managers"); len(elem) >= l && elem[0:l] == "managers" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListEmployeeDeptManagersRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						case 's': // Prefix: "salaries"
							if l := len("salaries"); len(elem) >= l && elem[0:l] == "salaries" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListEmployeeSalariesRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 't': // Prefix: "titles"
							if l := len("titles"); len(elem) >= l && elem[0:l] == "titles" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListEmployeeTitlesRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			case 's': // Prefix: "salaries"
				if l := len("salaries"); len(elem) >= l && elem[0:l] == "salaries" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListSalaryRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateSalaryRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteSalaryRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadSalaryRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateSalaryRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/employee"
						if l := len("/employee"); len(elem) >= l && elem[0:l] == "/employee" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleReadSalaryEmployeeRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 't': // Prefix: "titles"
				if l := len("titles"); len(elem) >= l && elem[0:l] == "titles" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListTitleRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateTitleRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteTitleRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadTitleRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateTitleRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/employee"
						if l := len("/employee"); len(elem) >= l && elem[0:l] == "/employee" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleReadTitleEmployeeRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'd': // Prefix: "dep"
				if l := len("dep"); len(elem) >= l && elem[0:l] == "dep" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "artments"
					if l := len("artments"); len(elem) >= l && elem[0:l] == "artments" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListDepartment"
							r.operationID = "listDepartment"
							r.pathPattern = "/departments"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateDepartment"
							r.operationID = "createDepartment"
							r.pathPattern = "/departments"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteDepartment"
								r.operationID = "deleteDepartment"
								r.pathPattern = "/departments/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadDepartment"
								r.operationID = "readDepartment"
								r.pathPattern = "/departments/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateDepartment"
								r.operationID = "updateDepartment"
								r.pathPattern = "/departments/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/dept-"
							if l := len("/dept-"); len(elem) >= l && elem[0:l] == "/dept-" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "employees"
								if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListDepartmentDeptEmployees
										r.name = "ListDepartmentDeptEmployees"
										r.operationID = "listDepartmentDeptEmployees"
										r.pathPattern = "/departments/{id}/dept-employees"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'm': // Prefix: "managers"
								if l := len("managers"); len(elem) >= l && elem[0:l] == "managers" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListDepartmentDeptManagers
										r.name = "ListDepartmentDeptManagers"
										r.operationID = "listDepartmentDeptManagers"
										r.pathPattern = "/departments/{id}/dept-managers"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				case 't': // Prefix: "t-"
					if l := len("t-"); len(elem) >= l && elem[0:l] == "t-" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "employees"
						if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "ListDeptEmployee"
								r.operationID = "listDeptEmployee"
								r.pathPattern = "/dept-employees"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "CreateDeptEmployee"
								r.operationID = "createDeptEmployee"
								r.pathPattern = "/dept-employees"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = "DeleteDeptEmployee"
									r.operationID = "deleteDeptEmployee"
									r.pathPattern = "/dept-employees/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = "ReadDeptEmployee"
									r.operationID = "readDeptEmployee"
									r.pathPattern = "/dept-employees/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "PATCH":
									r.name = "UpdateDeptEmployee"
									r.operationID = "updateDeptEmployee"
									r.pathPattern = "/dept-employees/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "department"
									if l := len("department"); len(elem) >= l && elem[0:l] == "department" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ReadDeptEmployeeDepartment
											r.name = "ReadDeptEmployeeDepartment"
											r.operationID = "readDeptEmployeeDepartment"
											r.pathPattern = "/dept-employees/{id}/department"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 'e': // Prefix: "employee"
									if l := len("employee"); len(elem) >= l && elem[0:l] == "employee" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ReadDeptEmployeeEmployee
											r.name = "ReadDeptEmployeeEmployee"
											r.operationID = "readDeptEmployeeEmployee"
											r.pathPattern = "/dept-employees/{id}/employee"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								}
							}
						}
					case 'm': // Prefix: "managers"
						if l := len("managers"); len(elem) >= l && elem[0:l] == "managers" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "ListDeptManager"
								r.operationID = "listDeptManager"
								r.pathPattern = "/dept-managers"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "CreateDeptManager"
								r.operationID = "createDeptManager"
								r.pathPattern = "/dept-managers"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = "DeleteDeptManager"
									r.operationID = "deleteDeptManager"
									r.pathPattern = "/dept-managers/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = "ReadDeptManager"
									r.operationID = "readDeptManager"
									r.pathPattern = "/dept-managers/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "PATCH":
									r.name = "UpdateDeptManager"
									r.operationID = "updateDeptManager"
									r.pathPattern = "/dept-managers/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "department"
									if l := len("department"); len(elem) >= l && elem[0:l] == "department" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ReadDeptManagerDepartment
											r.name = "ReadDeptManagerDepartment"
											r.operationID = "readDeptManagerDepartment"
											r.pathPattern = "/dept-managers/{id}/department"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 'e': // Prefix: "employee"
									if l := len("employee"); len(elem) >= l && elem[0:l] == "employee" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ReadDeptManagerEmployee
											r.name = "ReadDeptManagerEmployee"
											r.operationID = "readDeptManagerEmployee"
											r.pathPattern = "/dept-managers/{id}/employee"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								}
							}
						}
					}
				}
			case 'e': // Prefix: "employees"
				if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListEmployee"
						r.operationID = "listEmployee"
						r.pathPattern = "/employees"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateEmployee"
						r.operationID = "createEmployee"
						r.pathPattern = "/employees"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteEmployee"
							r.operationID = "deleteEmployee"
							r.pathPattern = "/employees/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadEmployee"
							r.operationID = "readEmployee"
							r.pathPattern = "/employees/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateEmployee"
							r.operationID = "updateEmployee"
							r.pathPattern = "/employees/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "dept-"
							if l := len("dept-"); len(elem) >= l && elem[0:l] == "dept-" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "employees"
								if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListEmployeeDeptEmployees
										r.name = "ListEmployeeDeptEmployees"
										r.operationID = "listEmployeeDeptEmployees"
										r.pathPattern = "/employees/{id}/dept-employees"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'm': // Prefix: "managers"
								if l := len("managers"); len(elem) >= l && elem[0:l] == "managers" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListEmployeeDeptManagers
										r.name = "ListEmployeeDeptManagers"
										r.operationID = "listEmployeeDeptManagers"
										r.pathPattern = "/employees/{id}/dept-managers"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						case 's': // Prefix: "salaries"
							if l := len("salaries"); len(elem) >= l && elem[0:l] == "salaries" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListEmployeeSalaries
									r.name = "ListEmployeeSalaries"
									r.operationID = "listEmployeeSalaries"
									r.pathPattern = "/employees/{id}/salaries"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 't': // Prefix: "titles"
							if l := len("titles"); len(elem) >= l && elem[0:l] == "titles" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListEmployeeTitles
									r.name = "ListEmployeeTitles"
									r.operationID = "listEmployeeTitles"
									r.pathPattern = "/employees/{id}/titles"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 's': // Prefix: "salaries"
				if l := len("salaries"); len(elem) >= l && elem[0:l] == "salaries" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListSalary"
						r.operationID = "listSalary"
						r.pathPattern = "/salaries"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateSalary"
						r.operationID = "createSalary"
						r.pathPattern = "/salaries"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteSalary"
							r.operationID = "deleteSalary"
							r.pathPattern = "/salaries/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadSalary"
							r.operationID = "readSalary"
							r.pathPattern = "/salaries/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateSalary"
							r.operationID = "updateSalary"
							r.pathPattern = "/salaries/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/employee"
						if l := len("/employee"); len(elem) >= l && elem[0:l] == "/employee" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ReadSalaryEmployee
								r.name = "ReadSalaryEmployee"
								r.operationID = "readSalaryEmployee"
								r.pathPattern = "/salaries/{id}/employee"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 't': // Prefix: "titles"
				if l := len("titles"); len(elem) >= l && elem[0:l] == "titles" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListTitle"
						r.operationID = "listTitle"
						r.pathPattern = "/titles"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateTitle"
						r.operationID = "createTitle"
						r.pathPattern = "/titles"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteTitle"
							r.operationID = "deleteTitle"
							r.pathPattern = "/titles/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadTitle"
							r.operationID = "readTitle"
							r.pathPattern = "/titles/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateTitle"
							r.operationID = "updateTitle"
							r.pathPattern = "/titles/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/employee"
						if l := len("/employee"); len(elem) >= l && elem[0:l] == "/employee" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ReadTitleEmployee
								r.name = "ReadTitleEmployee"
								r.operationID = "readTitleEmployee"
								r.pathPattern = "/titles/{id}/employee"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
