// Code generated by ent, DO NOT EDIT.

package ogent

import "employees/ent"

func NewDepartmentCreate(e *ent.Department) *DepartmentCreate {
	if e == nil {
		return nil
	}
	var ret DepartmentCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDepartmentCreates(es []*ent.Department) []DepartmentCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]DepartmentCreate, len(es))
	for i, e := range es {
		r[i] = NewDepartmentCreate(e).Elem()
	}
	return r
}

func (d *DepartmentCreate) Elem() DepartmentCreate {
	if d == nil {
		return DepartmentCreate{}
	}
	return *d
}

func NewDepartmentList(e *ent.Department) *DepartmentList {
	if e == nil {
		return nil
	}
	var ret DepartmentList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDepartmentLists(es []*ent.Department) []DepartmentList {
	if len(es) == 0 {
		return nil
	}
	r := make([]DepartmentList, len(es))
	for i, e := range es {
		r[i] = NewDepartmentList(e).Elem()
	}
	return r
}

func (d *DepartmentList) Elem() DepartmentList {
	if d == nil {
		return DepartmentList{}
	}
	return *d
}

func NewDepartmentRead(e *ent.Department) *DepartmentRead {
	if e == nil {
		return nil
	}
	var ret DepartmentRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDepartmentReads(es []*ent.Department) []DepartmentRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]DepartmentRead, len(es))
	for i, e := range es {
		r[i] = NewDepartmentRead(e).Elem()
	}
	return r
}

func (d *DepartmentRead) Elem() DepartmentRead {
	if d == nil {
		return DepartmentRead{}
	}
	return *d
}

func NewDepartmentUpdate(e *ent.Department) *DepartmentUpdate {
	if e == nil {
		return nil
	}
	var ret DepartmentUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDepartmentUpdates(es []*ent.Department) []DepartmentUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]DepartmentUpdate, len(es))
	for i, e := range es {
		r[i] = NewDepartmentUpdate(e).Elem()
	}
	return r
}

func (d *DepartmentUpdate) Elem() DepartmentUpdate {
	if d == nil {
		return DepartmentUpdate{}
	}
	return *d
}

func NewDepartmentDeptEmployeesList(e *ent.DeptEmployee) *DepartmentDeptEmployeesList {
	if e == nil {
		return nil
	}
	var ret DepartmentDeptEmployeesList
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.DepartmentID = NewOptString(e.DepartmentID)
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDepartmentDeptEmployeesLists(es []*ent.DeptEmployee) []DepartmentDeptEmployeesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]DepartmentDeptEmployeesList, len(es))
	for i, e := range es {
		r[i] = NewDepartmentDeptEmployeesList(e).Elem()
	}
	return r
}

func (de *DepartmentDeptEmployeesList) Elem() DepartmentDeptEmployeesList {
	if de == nil {
		return DepartmentDeptEmployeesList{}
	}
	return *de
}

func NewDepartmentDeptManagersList(e *ent.DeptManager) *DepartmentDeptManagersList {
	if e == nil {
		return nil
	}
	var ret DepartmentDeptManagersList
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.DepartmentID = NewOptString(e.DepartmentID)
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDepartmentDeptManagersLists(es []*ent.DeptManager) []DepartmentDeptManagersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]DepartmentDeptManagersList, len(es))
	for i, e := range es {
		r[i] = NewDepartmentDeptManagersList(e).Elem()
	}
	return r
}

func (dm *DepartmentDeptManagersList) Elem() DepartmentDeptManagersList {
	if dm == nil {
		return DepartmentDeptManagersList{}
	}
	return *dm
}

func NewDeptEmployeeCreate(e *ent.DeptEmployee) *DeptEmployeeCreate {
	if e == nil {
		return nil
	}
	var ret DeptEmployeeCreate
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.DepartmentID = NewOptString(e.DepartmentID)
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDeptEmployeeCreates(es []*ent.DeptEmployee) []DeptEmployeeCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]DeptEmployeeCreate, len(es))
	for i, e := range es {
		r[i] = NewDeptEmployeeCreate(e).Elem()
	}
	return r
}

func (de *DeptEmployeeCreate) Elem() DeptEmployeeCreate {
	if de == nil {
		return DeptEmployeeCreate{}
	}
	return *de
}

func NewDeptEmployeeList(e *ent.DeptEmployee) *DeptEmployeeList {
	if e == nil {
		return nil
	}
	var ret DeptEmployeeList
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.DepartmentID = NewOptString(e.DepartmentID)
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDeptEmployeeLists(es []*ent.DeptEmployee) []DeptEmployeeList {
	if len(es) == 0 {
		return nil
	}
	r := make([]DeptEmployeeList, len(es))
	for i, e := range es {
		r[i] = NewDeptEmployeeList(e).Elem()
	}
	return r
}

func (de *DeptEmployeeList) Elem() DeptEmployeeList {
	if de == nil {
		return DeptEmployeeList{}
	}
	return *de
}

func NewDeptEmployeeRead(e *ent.DeptEmployee) *DeptEmployeeRead {
	if e == nil {
		return nil
	}
	var ret DeptEmployeeRead
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.DepartmentID = NewOptString(e.DepartmentID)
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDeptEmployeeReads(es []*ent.DeptEmployee) []DeptEmployeeRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]DeptEmployeeRead, len(es))
	for i, e := range es {
		r[i] = NewDeptEmployeeRead(e).Elem()
	}
	return r
}

func (de *DeptEmployeeRead) Elem() DeptEmployeeRead {
	if de == nil {
		return DeptEmployeeRead{}
	}
	return *de
}

func NewDeptEmployeeUpdate(e *ent.DeptEmployee) *DeptEmployeeUpdate {
	if e == nil {
		return nil
	}
	var ret DeptEmployeeUpdate
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.DepartmentID = NewOptString(e.DepartmentID)
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDeptEmployeeUpdates(es []*ent.DeptEmployee) []DeptEmployeeUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]DeptEmployeeUpdate, len(es))
	for i, e := range es {
		r[i] = NewDeptEmployeeUpdate(e).Elem()
	}
	return r
}

func (de *DeptEmployeeUpdate) Elem() DeptEmployeeUpdate {
	if de == nil {
		return DeptEmployeeUpdate{}
	}
	return *de
}

func NewDeptEmployeeDepartmentRead(e *ent.Department) *DeptEmployeeDepartmentRead {
	if e == nil {
		return nil
	}
	var ret DeptEmployeeDepartmentRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDeptEmployeeDepartmentReads(es []*ent.Department) []DeptEmployeeDepartmentRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]DeptEmployeeDepartmentRead, len(es))
	for i, e := range es {
		r[i] = NewDeptEmployeeDepartmentRead(e).Elem()
	}
	return r
}

func (d *DeptEmployeeDepartmentRead) Elem() DeptEmployeeDepartmentRead {
	if d == nil {
		return DeptEmployeeDepartmentRead{}
	}
	return *d
}

func NewDeptEmployeeEmployeeRead(e *ent.Employee) *DeptEmployeeEmployeeRead {
	if e == nil {
		return nil
	}
	var ret DeptEmployeeEmployeeRead
	ret.ID = e.ID
	ret.BirthDate = e.BirthDate
	ret.FirstName = e.FirstName
	ret.LastName = e.LastName
	ret.Gender = DeptEmployeeEmployeeReadGender(e.Gender)
	ret.HireDate = e.HireDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDeptEmployeeEmployeeReads(es []*ent.Employee) []DeptEmployeeEmployeeRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]DeptEmployeeEmployeeRead, len(es))
	for i, e := range es {
		r[i] = NewDeptEmployeeEmployeeRead(e).Elem()
	}
	return r
}

func (e *DeptEmployeeEmployeeRead) Elem() DeptEmployeeEmployeeRead {
	if e == nil {
		return DeptEmployeeEmployeeRead{}
	}
	return *e
}

func NewDeptManagerCreate(e *ent.DeptManager) *DeptManagerCreate {
	if e == nil {
		return nil
	}
	var ret DeptManagerCreate
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.DepartmentID = NewOptString(e.DepartmentID)
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDeptManagerCreates(es []*ent.DeptManager) []DeptManagerCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]DeptManagerCreate, len(es))
	for i, e := range es {
		r[i] = NewDeptManagerCreate(e).Elem()
	}
	return r
}

func (dm *DeptManagerCreate) Elem() DeptManagerCreate {
	if dm == nil {
		return DeptManagerCreate{}
	}
	return *dm
}

func NewDeptManagerList(e *ent.DeptManager) *DeptManagerList {
	if e == nil {
		return nil
	}
	var ret DeptManagerList
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.DepartmentID = NewOptString(e.DepartmentID)
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDeptManagerLists(es []*ent.DeptManager) []DeptManagerList {
	if len(es) == 0 {
		return nil
	}
	r := make([]DeptManagerList, len(es))
	for i, e := range es {
		r[i] = NewDeptManagerList(e).Elem()
	}
	return r
}

func (dm *DeptManagerList) Elem() DeptManagerList {
	if dm == nil {
		return DeptManagerList{}
	}
	return *dm
}

func NewDeptManagerRead(e *ent.DeptManager) *DeptManagerRead {
	if e == nil {
		return nil
	}
	var ret DeptManagerRead
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.DepartmentID = NewOptString(e.DepartmentID)
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDeptManagerReads(es []*ent.DeptManager) []DeptManagerRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]DeptManagerRead, len(es))
	for i, e := range es {
		r[i] = NewDeptManagerRead(e).Elem()
	}
	return r
}

func (dm *DeptManagerRead) Elem() DeptManagerRead {
	if dm == nil {
		return DeptManagerRead{}
	}
	return *dm
}

func NewDeptManagerUpdate(e *ent.DeptManager) *DeptManagerUpdate {
	if e == nil {
		return nil
	}
	var ret DeptManagerUpdate
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.DepartmentID = NewOptString(e.DepartmentID)
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDeptManagerUpdates(es []*ent.DeptManager) []DeptManagerUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]DeptManagerUpdate, len(es))
	for i, e := range es {
		r[i] = NewDeptManagerUpdate(e).Elem()
	}
	return r
}

func (dm *DeptManagerUpdate) Elem() DeptManagerUpdate {
	if dm == nil {
		return DeptManagerUpdate{}
	}
	return *dm
}

func NewDeptManagerDepartmentRead(e *ent.Department) *DeptManagerDepartmentRead {
	if e == nil {
		return nil
	}
	var ret DeptManagerDepartmentRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDeptManagerDepartmentReads(es []*ent.Department) []DeptManagerDepartmentRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]DeptManagerDepartmentRead, len(es))
	for i, e := range es {
		r[i] = NewDeptManagerDepartmentRead(e).Elem()
	}
	return r
}

func (d *DeptManagerDepartmentRead) Elem() DeptManagerDepartmentRead {
	if d == nil {
		return DeptManagerDepartmentRead{}
	}
	return *d
}

func NewDeptManagerEmployeeRead(e *ent.Employee) *DeptManagerEmployeeRead {
	if e == nil {
		return nil
	}
	var ret DeptManagerEmployeeRead
	ret.ID = e.ID
	ret.BirthDate = e.BirthDate
	ret.FirstName = e.FirstName
	ret.LastName = e.LastName
	ret.Gender = DeptManagerEmployeeReadGender(e.Gender)
	ret.HireDate = e.HireDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewDeptManagerEmployeeReads(es []*ent.Employee) []DeptManagerEmployeeRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]DeptManagerEmployeeRead, len(es))
	for i, e := range es {
		r[i] = NewDeptManagerEmployeeRead(e).Elem()
	}
	return r
}

func (e *DeptManagerEmployeeRead) Elem() DeptManagerEmployeeRead {
	if e == nil {
		return DeptManagerEmployeeRead{}
	}
	return *e
}

func NewEmployeeCreate(e *ent.Employee) *EmployeeCreate {
	if e == nil {
		return nil
	}
	var ret EmployeeCreate
	ret.ID = e.ID
	ret.BirthDate = e.BirthDate
	ret.FirstName = e.FirstName
	ret.LastName = e.LastName
	ret.Gender = EmployeeCreateGender(e.Gender)
	ret.HireDate = e.HireDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewEmployeeCreates(es []*ent.Employee) []EmployeeCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]EmployeeCreate, len(es))
	for i, e := range es {
		r[i] = NewEmployeeCreate(e).Elem()
	}
	return r
}

func (e *EmployeeCreate) Elem() EmployeeCreate {
	if e == nil {
		return EmployeeCreate{}
	}
	return *e
}

func NewEmployeeList(e *ent.Employee) *EmployeeList {
	if e == nil {
		return nil
	}
	var ret EmployeeList
	ret.ID = e.ID
	ret.BirthDate = e.BirthDate
	ret.FirstName = e.FirstName
	ret.LastName = e.LastName
	ret.Gender = EmployeeListGender(e.Gender)
	ret.HireDate = e.HireDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewEmployeeLists(es []*ent.Employee) []EmployeeList {
	if len(es) == 0 {
		return nil
	}
	r := make([]EmployeeList, len(es))
	for i, e := range es {
		r[i] = NewEmployeeList(e).Elem()
	}
	return r
}

func (e *EmployeeList) Elem() EmployeeList {
	if e == nil {
		return EmployeeList{}
	}
	return *e
}

func NewEmployeeRead(e *ent.Employee) *EmployeeRead {
	if e == nil {
		return nil
	}
	var ret EmployeeRead
	ret.ID = e.ID
	ret.BirthDate = e.BirthDate
	ret.FirstName = e.FirstName
	ret.LastName = e.LastName
	ret.Gender = EmployeeReadGender(e.Gender)
	ret.HireDate = e.HireDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewEmployeeReads(es []*ent.Employee) []EmployeeRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]EmployeeRead, len(es))
	for i, e := range es {
		r[i] = NewEmployeeRead(e).Elem()
	}
	return r
}

func (e *EmployeeRead) Elem() EmployeeRead {
	if e == nil {
		return EmployeeRead{}
	}
	return *e
}

func NewEmployeeUpdate(e *ent.Employee) *EmployeeUpdate {
	if e == nil {
		return nil
	}
	var ret EmployeeUpdate
	ret.ID = e.ID
	ret.BirthDate = e.BirthDate
	ret.FirstName = e.FirstName
	ret.LastName = e.LastName
	ret.Gender = EmployeeUpdateGender(e.Gender)
	ret.HireDate = e.HireDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewEmployeeUpdates(es []*ent.Employee) []EmployeeUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]EmployeeUpdate, len(es))
	for i, e := range es {
		r[i] = NewEmployeeUpdate(e).Elem()
	}
	return r
}

func (e *EmployeeUpdate) Elem() EmployeeUpdate {
	if e == nil {
		return EmployeeUpdate{}
	}
	return *e
}

func NewEmployeeDeptEmployeesList(e *ent.DeptEmployee) *EmployeeDeptEmployeesList {
	if e == nil {
		return nil
	}
	var ret EmployeeDeptEmployeesList
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.DepartmentID = NewOptString(e.DepartmentID)
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewEmployeeDeptEmployeesLists(es []*ent.DeptEmployee) []EmployeeDeptEmployeesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]EmployeeDeptEmployeesList, len(es))
	for i, e := range es {
		r[i] = NewEmployeeDeptEmployeesList(e).Elem()
	}
	return r
}

func (de *EmployeeDeptEmployeesList) Elem() EmployeeDeptEmployeesList {
	if de == nil {
		return EmployeeDeptEmployeesList{}
	}
	return *de
}

func NewEmployeeDeptManagersList(e *ent.DeptManager) *EmployeeDeptManagersList {
	if e == nil {
		return nil
	}
	var ret EmployeeDeptManagersList
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.DepartmentID = NewOptString(e.DepartmentID)
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewEmployeeDeptManagersLists(es []*ent.DeptManager) []EmployeeDeptManagersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]EmployeeDeptManagersList, len(es))
	for i, e := range es {
		r[i] = NewEmployeeDeptManagersList(e).Elem()
	}
	return r
}

func (dm *EmployeeDeptManagersList) Elem() EmployeeDeptManagersList {
	if dm == nil {
		return EmployeeDeptManagersList{}
	}
	return *dm
}

func NewEmployeeSalariesList(e *ent.Salary) *EmployeeSalariesList {
	if e == nil {
		return nil
	}
	var ret EmployeeSalariesList
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.Salary = e.Salary
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewEmployeeSalariesLists(es []*ent.Salary) []EmployeeSalariesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]EmployeeSalariesList, len(es))
	for i, e := range es {
		r[i] = NewEmployeeSalariesList(e).Elem()
	}
	return r
}

func (s *EmployeeSalariesList) Elem() EmployeeSalariesList {
	if s == nil {
		return EmployeeSalariesList{}
	}
	return *s
}

func NewEmployeeTitlesList(e *ent.Title) *EmployeeTitlesList {
	if e == nil {
		return nil
	}
	var ret EmployeeTitlesList
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.Title = e.Title
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewEmployeeTitlesLists(es []*ent.Title) []EmployeeTitlesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]EmployeeTitlesList, len(es))
	for i, e := range es {
		r[i] = NewEmployeeTitlesList(e).Elem()
	}
	return r
}

func (t *EmployeeTitlesList) Elem() EmployeeTitlesList {
	if t == nil {
		return EmployeeTitlesList{}
	}
	return *t
}

func NewSalaryCreate(e *ent.Salary) *SalaryCreate {
	if e == nil {
		return nil
	}
	var ret SalaryCreate
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.Salary = e.Salary
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewSalaryCreates(es []*ent.Salary) []SalaryCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]SalaryCreate, len(es))
	for i, e := range es {
		r[i] = NewSalaryCreate(e).Elem()
	}
	return r
}

func (s *SalaryCreate) Elem() SalaryCreate {
	if s == nil {
		return SalaryCreate{}
	}
	return *s
}

func NewSalaryList(e *ent.Salary) *SalaryList {
	if e == nil {
		return nil
	}
	var ret SalaryList
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.Salary = e.Salary
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewSalaryLists(es []*ent.Salary) []SalaryList {
	if len(es) == 0 {
		return nil
	}
	r := make([]SalaryList, len(es))
	for i, e := range es {
		r[i] = NewSalaryList(e).Elem()
	}
	return r
}

func (s *SalaryList) Elem() SalaryList {
	if s == nil {
		return SalaryList{}
	}
	return *s
}

func NewSalaryRead(e *ent.Salary) *SalaryRead {
	if e == nil {
		return nil
	}
	var ret SalaryRead
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.Salary = e.Salary
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewSalaryReads(es []*ent.Salary) []SalaryRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]SalaryRead, len(es))
	for i, e := range es {
		r[i] = NewSalaryRead(e).Elem()
	}
	return r
}

func (s *SalaryRead) Elem() SalaryRead {
	if s == nil {
		return SalaryRead{}
	}
	return *s
}

func NewSalaryUpdate(e *ent.Salary) *SalaryUpdate {
	if e == nil {
		return nil
	}
	var ret SalaryUpdate
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.Salary = e.Salary
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewSalaryUpdates(es []*ent.Salary) []SalaryUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]SalaryUpdate, len(es))
	for i, e := range es {
		r[i] = NewSalaryUpdate(e).Elem()
	}
	return r
}

func (s *SalaryUpdate) Elem() SalaryUpdate {
	if s == nil {
		return SalaryUpdate{}
	}
	return *s
}

func NewSalaryEmployeeRead(e *ent.Employee) *SalaryEmployeeRead {
	if e == nil {
		return nil
	}
	var ret SalaryEmployeeRead
	ret.ID = e.ID
	ret.BirthDate = e.BirthDate
	ret.FirstName = e.FirstName
	ret.LastName = e.LastName
	ret.Gender = SalaryEmployeeReadGender(e.Gender)
	ret.HireDate = e.HireDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewSalaryEmployeeReads(es []*ent.Employee) []SalaryEmployeeRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]SalaryEmployeeRead, len(es))
	for i, e := range es {
		r[i] = NewSalaryEmployeeRead(e).Elem()
	}
	return r
}

func (e *SalaryEmployeeRead) Elem() SalaryEmployeeRead {
	if e == nil {
		return SalaryEmployeeRead{}
	}
	return *e
}

func NewTitleCreate(e *ent.Title) *TitleCreate {
	if e == nil {
		return nil
	}
	var ret TitleCreate
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.Title = e.Title
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewTitleCreates(es []*ent.Title) []TitleCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]TitleCreate, len(es))
	for i, e := range es {
		r[i] = NewTitleCreate(e).Elem()
	}
	return r
}

func (t *TitleCreate) Elem() TitleCreate {
	if t == nil {
		return TitleCreate{}
	}
	return *t
}

func NewTitleList(e *ent.Title) *TitleList {
	if e == nil {
		return nil
	}
	var ret TitleList
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.Title = e.Title
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewTitleLists(es []*ent.Title) []TitleList {
	if len(es) == 0 {
		return nil
	}
	r := make([]TitleList, len(es))
	for i, e := range es {
		r[i] = NewTitleList(e).Elem()
	}
	return r
}

func (t *TitleList) Elem() TitleList {
	if t == nil {
		return TitleList{}
	}
	return *t
}

func NewTitleRead(e *ent.Title) *TitleRead {
	if e == nil {
		return nil
	}
	var ret TitleRead
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.Title = e.Title
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewTitleReads(es []*ent.Title) []TitleRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]TitleRead, len(es))
	for i, e := range es {
		r[i] = NewTitleRead(e).Elem()
	}
	return r
}

func (t *TitleRead) Elem() TitleRead {
	if t == nil {
		return TitleRead{}
	}
	return *t
}

func NewTitleUpdate(e *ent.Title) *TitleUpdate {
	if e == nil {
		return nil
	}
	var ret TitleUpdate
	ret.ID = e.ID
	ret.EmployeeID = NewOptString(e.EmployeeID)
	ret.Title = e.Title
	ret.FromDate = e.FromDate
	ret.ToDate = e.ToDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewTitleUpdates(es []*ent.Title) []TitleUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]TitleUpdate, len(es))
	for i, e := range es {
		r[i] = NewTitleUpdate(e).Elem()
	}
	return r
}

func (t *TitleUpdate) Elem() TitleUpdate {
	if t == nil {
		return TitleUpdate{}
	}
	return *t
}

func NewTitleEmployeeRead(e *ent.Employee) *TitleEmployeeRead {
	if e == nil {
		return nil
	}
	var ret TitleEmployeeRead
	ret.ID = e.ID
	ret.BirthDate = e.BirthDate
	ret.FirstName = e.FirstName
	ret.LastName = e.LastName
	ret.Gender = TitleEmployeeReadGender(e.Gender)
	ret.HireDate = e.HireDate
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	return &ret
}

func NewTitleEmployeeReads(es []*ent.Employee) []TitleEmployeeRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]TitleEmployeeRead, len(es))
	for i, e := range es {
		r[i] = NewTitleEmployeeRead(e).Elem()
	}
	return r
}

func (e *TitleEmployeeRead) Elem() TitleEmployeeRead {
	if e == nil {
		return TitleEmployeeRead{}
	}
	return *e
}
