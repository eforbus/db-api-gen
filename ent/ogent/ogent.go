// Code generated by ent, DO NOT EDIT.

package ogent

import (
	"context"
	"net/http"

	"employees/ent"
	"employees/ent/department"
	"employees/ent/deptemployee"
	"employees/ent/deptmanager"
	"employees/ent/employee"
	"employees/ent/salary"
	"employees/ent/title"

	"github.com/go-faster/jx"
)

// OgentHandler implements the ogen generated Handler interface and uses Ent as data layer.
type OgentHandler struct {
	client *ent.Client
}

// NewOgentHandler returns a new OgentHandler.
func NewOgentHandler(c *ent.Client) *OgentHandler { return &OgentHandler{c} }

// rawError renders err as json string.
func rawError(err error) jx.Raw {
	var e jx.Encoder
	e.Str(err.Error())
	return e.Bytes()
}

// CreateDepartment handles POST /departments requests.
func (h *OgentHandler) CreateDepartment(ctx context.Context, req *CreateDepartmentReq) (CreateDepartmentRes, error) {
	b := h.client.Department.Create()
	// Add all fields.
	b.SetName(req.Name)
	if v, ok := req.CreatedAt.Get(); ok {
		b.SetCreatedAt(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	b.AddDeptEmployeeIDs(req.DeptEmployees...)
	b.AddDeptManagerIDs(req.DeptManagers...)
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Department.Query().Where(department.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewDepartmentCreate(e), nil
}

// ReadDepartment handles GET /departments/{id} requests.
func (h *OgentHandler) ReadDepartment(ctx context.Context, params ReadDepartmentParams) (ReadDepartmentRes, error) {
	q := h.client.Department.Query().Where(department.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewDepartmentRead(e), nil
}

// UpdateDepartment handles PATCH /departments/{id} requests.
func (h *OgentHandler) UpdateDepartment(ctx context.Context, req *UpdateDepartmentReq, params UpdateDepartmentParams) (UpdateDepartmentRes, error) {
	b := h.client.Department.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.Name.Get(); ok {
		b.SetName(v)
	}
	if v, ok := req.CreatedAt.Get(); ok {
		b.SetCreatedAt(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	if req.DeptEmployees != nil {
		b.ClearDeptEmployees().AddDeptEmployeeIDs(req.DeptEmployees...)
	}
	if req.DeptManagers != nil {
		b.ClearDeptManagers().AddDeptManagerIDs(req.DeptManagers...)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Department.Query().Where(department.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewDepartmentUpdate(e), nil
}

// DeleteDepartment handles DELETE /departments/{id} requests.
func (h *OgentHandler) DeleteDepartment(ctx context.Context, params DeleteDepartmentParams) (DeleteDepartmentRes, error) {
	err := h.client.Department.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeleteDepartmentNoContent), nil

}

// ListDepartment handles GET /departments requests.
func (h *OgentHandler) ListDepartment(ctx context.Context, params ListDepartmentParams) (ListDepartmentRes, error) {
	q := h.client.Department.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewDepartmentLists(es)
	return (*ListDepartmentOKApplicationJSON)(&r), nil
}

// ListDepartmentDeptEmployees handles GET /departments/{id}/dept-employees requests.
func (h *OgentHandler) ListDepartmentDeptEmployees(ctx context.Context, params ListDepartmentDeptEmployeesParams) (ListDepartmentDeptEmployeesRes, error) {
	q := h.client.Department.Query().Where(department.IDEQ(params.ID)).QueryDeptEmployees()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)
	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewDepartmentDeptEmployeesLists(es)
	return (*ListDepartmentDeptEmployeesOKApplicationJSON)(&r), nil
}

// ListDepartmentDeptManagers handles GET /departments/{id}/dept-managers requests.
func (h *OgentHandler) ListDepartmentDeptManagers(ctx context.Context, params ListDepartmentDeptManagersParams) (ListDepartmentDeptManagersRes, error) {
	q := h.client.Department.Query().Where(department.IDEQ(params.ID)).QueryDeptManagers()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)
	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewDepartmentDeptManagersLists(es)
	return (*ListDepartmentDeptManagersOKApplicationJSON)(&r), nil
}

// CreateDeptEmployee handles POST /dept-employees requests.
func (h *OgentHandler) CreateDeptEmployee(ctx context.Context, req *CreateDeptEmployeeReq) (CreateDeptEmployeeRes, error) {
	b := h.client.DeptEmployee.Create()
	// Add all fields.
	if v, ok := req.EmployeeID.Get(); ok {
		b.SetEmployeeID(v)
	}
	if v, ok := req.DepartmentID.Get(); ok {
		b.SetDepartmentID(v)
	}
	b.SetFromDate(req.FromDate)
	b.SetToDate(req.ToDate)
	if v, ok := req.CreatedAt.Get(); ok {
		b.SetCreatedAt(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	if v, ok := req.Employee.Get(); ok {
		b.SetEmployeeID(v)
	}
	if v, ok := req.Department.Get(); ok {
		b.SetDepartmentID(v)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.DeptEmployee.Query().Where(deptemployee.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewDeptEmployeeCreate(e), nil
}

// ReadDeptEmployee handles GET /dept-employees/{id} requests.
func (h *OgentHandler) ReadDeptEmployee(ctx context.Context, params ReadDeptEmployeeParams) (ReadDeptEmployeeRes, error) {
	q := h.client.DeptEmployee.Query().Where(deptemployee.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewDeptEmployeeRead(e), nil
}

// UpdateDeptEmployee handles PATCH /dept-employees/{id} requests.
func (h *OgentHandler) UpdateDeptEmployee(ctx context.Context, req *UpdateDeptEmployeeReq, params UpdateDeptEmployeeParams) (UpdateDeptEmployeeRes, error) {
	b := h.client.DeptEmployee.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.EmployeeID.Get(); ok {
		b.SetEmployeeID(v)
	}
	if v, ok := req.DepartmentID.Get(); ok {
		b.SetDepartmentID(v)
	}
	if v, ok := req.FromDate.Get(); ok {
		b.SetFromDate(v)
	}
	if v, ok := req.ToDate.Get(); ok {
		b.SetToDate(v)
	}
	if v, ok := req.CreatedAt.Get(); ok {
		b.SetCreatedAt(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	if v, ok := req.Employee.Get(); ok {
		b.SetEmployeeID(v)
	}
	if v, ok := req.Department.Get(); ok {
		b.SetDepartmentID(v)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.DeptEmployee.Query().Where(deptemployee.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewDeptEmployeeUpdate(e), nil
}

// DeleteDeptEmployee handles DELETE /dept-employees/{id} requests.
func (h *OgentHandler) DeleteDeptEmployee(ctx context.Context, params DeleteDeptEmployeeParams) (DeleteDeptEmployeeRes, error) {
	err := h.client.DeptEmployee.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeleteDeptEmployeeNoContent), nil

}

// ListDeptEmployee handles GET /dept-employees requests.
func (h *OgentHandler) ListDeptEmployee(ctx context.Context, params ListDeptEmployeeParams) (ListDeptEmployeeRes, error) {
	q := h.client.DeptEmployee.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewDeptEmployeeLists(es)
	return (*ListDeptEmployeeOKApplicationJSON)(&r), nil
}

// ReadDeptEmployeeEmployee handles GET /dept-employees/{id}/employee requests.
func (h *OgentHandler) ReadDeptEmployeeEmployee(ctx context.Context, params ReadDeptEmployeeEmployeeParams) (ReadDeptEmployeeEmployeeRes, error) {
	q := h.client.DeptEmployee.Query().Where(deptemployee.IDEQ(params.ID)).QueryEmployee()
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewDeptEmployeeEmployeeRead(e), nil
}

// ReadDeptEmployeeDepartment handles GET /dept-employees/{id}/department requests.
func (h *OgentHandler) ReadDeptEmployeeDepartment(ctx context.Context, params ReadDeptEmployeeDepartmentParams) (ReadDeptEmployeeDepartmentRes, error) {
	q := h.client.DeptEmployee.Query().Where(deptemployee.IDEQ(params.ID)).QueryDepartment()
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewDeptEmployeeDepartmentRead(e), nil
}

// CreateDeptManager handles POST /dept-managers requests.
func (h *OgentHandler) CreateDeptManager(ctx context.Context, req *CreateDeptManagerReq) (CreateDeptManagerRes, error) {
	b := h.client.DeptManager.Create()
	// Add all fields.
	if v, ok := req.EmployeeID.Get(); ok {
		b.SetEmployeeID(v)
	}
	if v, ok := req.DepartmentID.Get(); ok {
		b.SetDepartmentID(v)
	}
	b.SetFromDate(req.FromDate)
	b.SetToDate(req.ToDate)
	if v, ok := req.CreatedAt.Get(); ok {
		b.SetCreatedAt(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	if v, ok := req.Employee.Get(); ok {
		b.SetEmployeeID(v)
	}
	if v, ok := req.Department.Get(); ok {
		b.SetDepartmentID(v)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.DeptManager.Query().Where(deptmanager.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewDeptManagerCreate(e), nil
}

// ReadDeptManager handles GET /dept-managers/{id} requests.
func (h *OgentHandler) ReadDeptManager(ctx context.Context, params ReadDeptManagerParams) (ReadDeptManagerRes, error) {
	q := h.client.DeptManager.Query().Where(deptmanager.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewDeptManagerRead(e), nil
}

// UpdateDeptManager handles PATCH /dept-managers/{id} requests.
func (h *OgentHandler) UpdateDeptManager(ctx context.Context, req *UpdateDeptManagerReq, params UpdateDeptManagerParams) (UpdateDeptManagerRes, error) {
	b := h.client.DeptManager.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.EmployeeID.Get(); ok {
		b.SetEmployeeID(v)
	}
	if v, ok := req.DepartmentID.Get(); ok {
		b.SetDepartmentID(v)
	}
	if v, ok := req.FromDate.Get(); ok {
		b.SetFromDate(v)
	}
	if v, ok := req.ToDate.Get(); ok {
		b.SetToDate(v)
	}
	if v, ok := req.CreatedAt.Get(); ok {
		b.SetCreatedAt(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	if v, ok := req.Employee.Get(); ok {
		b.SetEmployeeID(v)
	}
	if v, ok := req.Department.Get(); ok {
		b.SetDepartmentID(v)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.DeptManager.Query().Where(deptmanager.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewDeptManagerUpdate(e), nil
}

// DeleteDeptManager handles DELETE /dept-managers/{id} requests.
func (h *OgentHandler) DeleteDeptManager(ctx context.Context, params DeleteDeptManagerParams) (DeleteDeptManagerRes, error) {
	err := h.client.DeptManager.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeleteDeptManagerNoContent), nil

}

// ListDeptManager handles GET /dept-managers requests.
func (h *OgentHandler) ListDeptManager(ctx context.Context, params ListDeptManagerParams) (ListDeptManagerRes, error) {
	q := h.client.DeptManager.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewDeptManagerLists(es)
	return (*ListDeptManagerOKApplicationJSON)(&r), nil
}

// ReadDeptManagerEmployee handles GET /dept-managers/{id}/employee requests.
func (h *OgentHandler) ReadDeptManagerEmployee(ctx context.Context, params ReadDeptManagerEmployeeParams) (ReadDeptManagerEmployeeRes, error) {
	q := h.client.DeptManager.Query().Where(deptmanager.IDEQ(params.ID)).QueryEmployee()
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewDeptManagerEmployeeRead(e), nil
}

// ReadDeptManagerDepartment handles GET /dept-managers/{id}/department requests.
func (h *OgentHandler) ReadDeptManagerDepartment(ctx context.Context, params ReadDeptManagerDepartmentParams) (ReadDeptManagerDepartmentRes, error) {
	q := h.client.DeptManager.Query().Where(deptmanager.IDEQ(params.ID)).QueryDepartment()
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewDeptManagerDepartmentRead(e), nil
}

// CreateEmployee handles POST /employees requests.
func (h *OgentHandler) CreateEmployee(ctx context.Context, req *CreateEmployeeReq) (CreateEmployeeRes, error) {
	b := h.client.Employee.Create()
	// Add all fields.
	b.SetBirthDate(req.BirthDate)
	b.SetFirstName(req.FirstName)
	b.SetLastName(req.LastName)
	b.SetGender(employee.Gender(req.Gender))
	b.SetHireDate(req.HireDate)
	if v, ok := req.CreatedAt.Get(); ok {
		b.SetCreatedAt(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	b.AddDeptEmployeeIDs(req.DeptEmployees...)
	b.AddDeptManagerIDs(req.DeptManagers...)
	b.AddSalaryIDs(req.Salaries...)
	b.AddTitleIDs(req.Titles...)
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Employee.Query().Where(employee.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewEmployeeCreate(e), nil
}

// ReadEmployee handles GET /employees/{id} requests.
func (h *OgentHandler) ReadEmployee(ctx context.Context, params ReadEmployeeParams) (ReadEmployeeRes, error) {
	q := h.client.Employee.Query().Where(employee.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewEmployeeRead(e), nil
}

// UpdateEmployee handles PATCH /employees/{id} requests.
func (h *OgentHandler) UpdateEmployee(ctx context.Context, req *UpdateEmployeeReq, params UpdateEmployeeParams) (UpdateEmployeeRes, error) {
	b := h.client.Employee.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.BirthDate.Get(); ok {
		b.SetBirthDate(v)
	}
	if v, ok := req.FirstName.Get(); ok {
		b.SetFirstName(v)
	}
	if v, ok := req.LastName.Get(); ok {
		b.SetLastName(v)
	}
	if v, ok := req.Gender.Get(); ok {
		b.SetGender(employee.Gender(v))
	}
	if v, ok := req.HireDate.Get(); ok {
		b.SetHireDate(v)
	}
	if v, ok := req.CreatedAt.Get(); ok {
		b.SetCreatedAt(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	if req.DeptEmployees != nil {
		b.ClearDeptEmployees().AddDeptEmployeeIDs(req.DeptEmployees...)
	}
	if req.DeptManagers != nil {
		b.ClearDeptManagers().AddDeptManagerIDs(req.DeptManagers...)
	}
	if req.Salaries != nil {
		b.ClearSalaries().AddSalaryIDs(req.Salaries...)
	}
	if req.Titles != nil {
		b.ClearTitles().AddTitleIDs(req.Titles...)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Employee.Query().Where(employee.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewEmployeeUpdate(e), nil
}

// DeleteEmployee handles DELETE /employees/{id} requests.
func (h *OgentHandler) DeleteEmployee(ctx context.Context, params DeleteEmployeeParams) (DeleteEmployeeRes, error) {
	err := h.client.Employee.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeleteEmployeeNoContent), nil

}

// ListEmployee handles GET /employees requests.
func (h *OgentHandler) ListEmployee(ctx context.Context, params ListEmployeeParams) (ListEmployeeRes, error) {
	q := h.client.Employee.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewEmployeeLists(es)
	return (*ListEmployeeOKApplicationJSON)(&r), nil
}

// ListEmployeeDeptEmployees handles GET /employees/{id}/dept-employees requests.
func (h *OgentHandler) ListEmployeeDeptEmployees(ctx context.Context, params ListEmployeeDeptEmployeesParams) (ListEmployeeDeptEmployeesRes, error) {
	q := h.client.Employee.Query().Where(employee.IDEQ(params.ID)).QueryDeptEmployees()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)
	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewEmployeeDeptEmployeesLists(es)
	return (*ListEmployeeDeptEmployeesOKApplicationJSON)(&r), nil
}

// ListEmployeeDeptManagers handles GET /employees/{id}/dept-managers requests.
func (h *OgentHandler) ListEmployeeDeptManagers(ctx context.Context, params ListEmployeeDeptManagersParams) (ListEmployeeDeptManagersRes, error) {
	q := h.client.Employee.Query().Where(employee.IDEQ(params.ID)).QueryDeptManagers()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)
	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewEmployeeDeptManagersLists(es)
	return (*ListEmployeeDeptManagersOKApplicationJSON)(&r), nil
}

// ListEmployeeSalaries handles GET /employees/{id}/salaries requests.
func (h *OgentHandler) ListEmployeeSalaries(ctx context.Context, params ListEmployeeSalariesParams) (ListEmployeeSalariesRes, error) {
	q := h.client.Employee.Query().Where(employee.IDEQ(params.ID)).QuerySalaries()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)
	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewEmployeeSalariesLists(es)
	return (*ListEmployeeSalariesOKApplicationJSON)(&r), nil
}

// ListEmployeeTitles handles GET /employees/{id}/titles requests.
func (h *OgentHandler) ListEmployeeTitles(ctx context.Context, params ListEmployeeTitlesParams) (ListEmployeeTitlesRes, error) {
	q := h.client.Employee.Query().Where(employee.IDEQ(params.ID)).QueryTitles()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)
	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewEmployeeTitlesLists(es)
	return (*ListEmployeeTitlesOKApplicationJSON)(&r), nil
}

// CreateSalary handles POST /salaries requests.
func (h *OgentHandler) CreateSalary(ctx context.Context, req *CreateSalaryReq) (CreateSalaryRes, error) {
	b := h.client.Salary.Create()
	// Add all fields.
	if v, ok := req.EmployeeID.Get(); ok {
		b.SetEmployeeID(v)
	}
	b.SetSalary(req.Salary)
	b.SetFromDate(req.FromDate)
	b.SetToDate(req.ToDate)
	if v, ok := req.CreatedAt.Get(); ok {
		b.SetCreatedAt(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	if v, ok := req.Employee.Get(); ok {
		b.SetEmployeeID(v)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Salary.Query().Where(salary.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewSalaryCreate(e), nil
}

// ReadSalary handles GET /salaries/{id} requests.
func (h *OgentHandler) ReadSalary(ctx context.Context, params ReadSalaryParams) (ReadSalaryRes, error) {
	q := h.client.Salary.Query().Where(salary.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewSalaryRead(e), nil
}

// UpdateSalary handles PATCH /salaries/{id} requests.
func (h *OgentHandler) UpdateSalary(ctx context.Context, req *UpdateSalaryReq, params UpdateSalaryParams) (UpdateSalaryRes, error) {
	b := h.client.Salary.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.EmployeeID.Get(); ok {
		b.SetEmployeeID(v)
	}
	if v, ok := req.Salary.Get(); ok {
		b.SetSalary(v)
	}
	if v, ok := req.FromDate.Get(); ok {
		b.SetFromDate(v)
	}
	if v, ok := req.ToDate.Get(); ok {
		b.SetToDate(v)
	}
	if v, ok := req.CreatedAt.Get(); ok {
		b.SetCreatedAt(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	if v, ok := req.Employee.Get(); ok {
		b.SetEmployeeID(v)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Salary.Query().Where(salary.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewSalaryUpdate(e), nil
}

// DeleteSalary handles DELETE /salaries/{id} requests.
func (h *OgentHandler) DeleteSalary(ctx context.Context, params DeleteSalaryParams) (DeleteSalaryRes, error) {
	err := h.client.Salary.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeleteSalaryNoContent), nil

}

// ListSalary handles GET /salaries requests.
func (h *OgentHandler) ListSalary(ctx context.Context, params ListSalaryParams) (ListSalaryRes, error) {
	q := h.client.Salary.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewSalaryLists(es)
	return (*ListSalaryOKApplicationJSON)(&r), nil
}

// ReadSalaryEmployee handles GET /salaries/{id}/employee requests.
func (h *OgentHandler) ReadSalaryEmployee(ctx context.Context, params ReadSalaryEmployeeParams) (ReadSalaryEmployeeRes, error) {
	q := h.client.Salary.Query().Where(salary.IDEQ(params.ID)).QueryEmployee()
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewSalaryEmployeeRead(e), nil
}

// CreateTitle handles POST /titles requests.
func (h *OgentHandler) CreateTitle(ctx context.Context, req *CreateTitleReq) (CreateTitleRes, error) {
	b := h.client.Title.Create()
	// Add all fields.
	if v, ok := req.EmployeeID.Get(); ok {
		b.SetEmployeeID(v)
	}
	b.SetTitle(req.Title)
	b.SetFromDate(req.FromDate)
	b.SetToDate(req.ToDate)
	if v, ok := req.CreatedAt.Get(); ok {
		b.SetCreatedAt(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	if v, ok := req.Employee.Get(); ok {
		b.SetEmployeeID(v)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Title.Query().Where(title.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewTitleCreate(e), nil
}

// ReadTitle handles GET /titles/{id} requests.
func (h *OgentHandler) ReadTitle(ctx context.Context, params ReadTitleParams) (ReadTitleRes, error) {
	q := h.client.Title.Query().Where(title.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewTitleRead(e), nil
}

// UpdateTitle handles PATCH /titles/{id} requests.
func (h *OgentHandler) UpdateTitle(ctx context.Context, req *UpdateTitleReq, params UpdateTitleParams) (UpdateTitleRes, error) {
	b := h.client.Title.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.EmployeeID.Get(); ok {
		b.SetEmployeeID(v)
	}
	if v, ok := req.Title.Get(); ok {
		b.SetTitle(v)
	}
	if v, ok := req.FromDate.Get(); ok {
		b.SetFromDate(v)
	}
	if v, ok := req.ToDate.Get(); ok {
		b.SetToDate(v)
	}
	if v, ok := req.CreatedAt.Get(); ok {
		b.SetCreatedAt(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	if v, ok := req.Employee.Get(); ok {
		b.SetEmployeeID(v)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Title.Query().Where(title.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewTitleUpdate(e), nil
}

// DeleteTitle handles DELETE /titles/{id} requests.
func (h *OgentHandler) DeleteTitle(ctx context.Context, params DeleteTitleParams) (DeleteTitleRes, error) {
	err := h.client.Title.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeleteTitleNoContent), nil

}

// ListTitle handles GET /titles requests.
func (h *OgentHandler) ListTitle(ctx context.Context, params ListTitleParams) (ListTitleRes, error) {
	q := h.client.Title.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewTitleLists(es)
	return (*ListTitleOKApplicationJSON)(&r), nil
}

// ReadTitleEmployee handles GET /titles/{id}/employee requests.
func (h *OgentHandler) ReadTitleEmployee(ctx context.Context, params ReadTitleEmployeeParams) (ReadTitleEmployeeRes, error) {
	q := h.client.Title.Query().Where(title.IDEQ(params.ID)).QueryEmployee()
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewTitleEmployeeRead(e), nil
}
