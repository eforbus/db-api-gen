// Code generated by ent, DO NOT EDIT.

package employee

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldHireDate holds the string denoting the hire_date field in the database.
	FieldHireDate = "hire_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDeptEmployees holds the string denoting the dept_employees edge name in mutations.
	EdgeDeptEmployees = "dept_employees"
	// EdgeDeptManagers holds the string denoting the dept_managers edge name in mutations.
	EdgeDeptManagers = "dept_managers"
	// EdgeSalaries holds the string denoting the salaries edge name in mutations.
	EdgeSalaries = "salaries"
	// EdgeTitles holds the string denoting the titles edge name in mutations.
	EdgeTitles = "titles"
	// Table holds the table name of the employee in the database.
	Table = "employee"
	// DeptEmployeesTable is the table that holds the dept_employees relation/edge.
	DeptEmployeesTable = "dept_employee"
	// DeptEmployeesInverseTable is the table name for the DeptEmployee entity.
	// It exists in this package in order to avoid circular dependency with the "deptemployee" package.
	DeptEmployeesInverseTable = "dept_employee"
	// DeptEmployeesColumn is the table column denoting the dept_employees relation/edge.
	DeptEmployeesColumn = "employee_id"
	// DeptManagersTable is the table that holds the dept_managers relation/edge.
	DeptManagersTable = "dept_manager"
	// DeptManagersInverseTable is the table name for the DeptManager entity.
	// It exists in this package in order to avoid circular dependency with the "deptmanager" package.
	DeptManagersInverseTable = "dept_manager"
	// DeptManagersColumn is the table column denoting the dept_managers relation/edge.
	DeptManagersColumn = "employee_id"
	// SalariesTable is the table that holds the salaries relation/edge.
	SalariesTable = "salary"
	// SalariesInverseTable is the table name for the Salary entity.
	// It exists in this package in order to avoid circular dependency with the "salary" package.
	SalariesInverseTable = "salary"
	// SalariesColumn is the table column denoting the salaries relation/edge.
	SalariesColumn = "employee_id"
	// TitlesTable is the table that holds the titles relation/edge.
	TitlesTable = "title"
	// TitlesInverseTable is the table name for the Title entity.
	// It exists in this package in order to avoid circular dependency with the "title" package.
	TitlesInverseTable = "title"
	// TitlesColumn is the table column denoting the titles relation/edge.
	TitlesColumn = "employee_id"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldBirthDate,
	FieldFirstName,
	FieldLastName,
	FieldGender,
	FieldHireDate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderM Gender = "M"
	GenderF Gender = "F"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderM, GenderF:
		return nil
	default:
		return fmt.Errorf("employee: invalid enum value for gender field: %q", ge)
	}
}

// OrderOption defines the ordering options for the Employee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBirthDate orders the results by the birth_date field.
func ByBirthDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthDate, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByHireDate orders the results by the hire_date field.
func ByHireDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHireDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeptEmployeesCount orders the results by dept_employees count.
func ByDeptEmployeesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeptEmployeesStep(), opts...)
	}
}

// ByDeptEmployees orders the results by dept_employees terms.
func ByDeptEmployees(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeptEmployeesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeptManagersCount orders the results by dept_managers count.
func ByDeptManagersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeptManagersStep(), opts...)
	}
}

// ByDeptManagers orders the results by dept_managers terms.
func ByDeptManagers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeptManagersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySalariesCount orders the results by salaries count.
func BySalariesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSalariesStep(), opts...)
	}
}

// BySalaries orders the results by salaries terms.
func BySalaries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSalariesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTitlesCount orders the results by titles count.
func ByTitlesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTitlesStep(), opts...)
	}
}

// ByTitles orders the results by titles terms.
func ByTitles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTitlesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDeptEmployeesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeptEmployeesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeptEmployeesTable, DeptEmployeesColumn),
	)
}
func newDeptManagersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeptManagersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeptManagersTable, DeptManagersColumn),
	)
}
func newSalariesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SalariesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SalariesTable, SalariesColumn),
	)
}
func newTitlesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TitlesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TitlesTable, TitlesColumn),
	)
}
