// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"employees/ent/employee"
	"employees/ent/predicate"
	"employees/ent/title"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TitleUpdate is the builder for updating Title entities.
type TitleUpdate struct {
	config
	hooks    []Hook
	mutation *TitleMutation
}

// Where appends a list predicates to the TitleUpdate builder.
func (tu *TitleUpdate) Where(ps ...predicate.Title) *TitleUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetEmployeeID sets the "employee_id" field.
func (tu *TitleUpdate) SetEmployeeID(s string) *TitleUpdate {
	tu.mutation.SetEmployeeID(s)
	return tu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (tu *TitleUpdate) SetNillableEmployeeID(s *string) *TitleUpdate {
	if s != nil {
		tu.SetEmployeeID(*s)
	}
	return tu
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (tu *TitleUpdate) ClearEmployeeID() *TitleUpdate {
	tu.mutation.ClearEmployeeID()
	return tu
}

// SetTitle sets the "title" field.
func (tu *TitleUpdate) SetTitle(s string) *TitleUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetFromDate sets the "from_date" field.
func (tu *TitleUpdate) SetFromDate(t time.Time) *TitleUpdate {
	tu.mutation.SetFromDate(t)
	return tu
}

// SetToDate sets the "to_date" field.
func (tu *TitleUpdate) SetToDate(t time.Time) *TitleUpdate {
	tu.mutation.SetToDate(t)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TitleUpdate) SetCreatedAt(t time.Time) *TitleUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TitleUpdate) SetNillableCreatedAt(t *time.Time) *TitleUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tu *TitleUpdate) ClearCreatedAt() *TitleUpdate {
	tu.mutation.ClearCreatedAt()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TitleUpdate) SetUpdatedAt(t time.Time) *TitleUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TitleUpdate) SetNillableUpdatedAt(t *time.Time) *TitleUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TitleUpdate) ClearUpdatedAt() *TitleUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (tu *TitleUpdate) SetEmployee(e *Employee) *TitleUpdate {
	return tu.SetEmployeeID(e.ID)
}

// Mutation returns the TitleMutation object of the builder.
func (tu *TitleUpdate) Mutation() *TitleMutation {
	return tu.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (tu *TitleUpdate) ClearEmployee() *TitleUpdate {
	tu.mutation.ClearEmployee()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TitleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TitleUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TitleUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TitleUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TitleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(title.Table, title.Columns, sqlgraph.NewFieldSpec(title.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(title.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.FromDate(); ok {
		_spec.SetField(title.FieldFromDate, field.TypeTime, value)
	}
	if value, ok := tu.mutation.ToDate(); ok {
		_spec.SetField(title.FieldToDate, field.TypeTime, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(title.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(title.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(title.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(title.FieldUpdatedAt, field.TypeTime)
	}
	if tu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   title.EmployeeTable,
			Columns: []string{title.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   title.EmployeeTable,
			Columns: []string{title.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{title.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TitleUpdateOne is the builder for updating a single Title entity.
type TitleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TitleMutation
}

// SetEmployeeID sets the "employee_id" field.
func (tuo *TitleUpdateOne) SetEmployeeID(s string) *TitleUpdateOne {
	tuo.mutation.SetEmployeeID(s)
	return tuo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (tuo *TitleUpdateOne) SetNillableEmployeeID(s *string) *TitleUpdateOne {
	if s != nil {
		tuo.SetEmployeeID(*s)
	}
	return tuo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (tuo *TitleUpdateOne) ClearEmployeeID() *TitleUpdateOne {
	tuo.mutation.ClearEmployeeID()
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TitleUpdateOne) SetTitle(s string) *TitleUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetFromDate sets the "from_date" field.
func (tuo *TitleUpdateOne) SetFromDate(t time.Time) *TitleUpdateOne {
	tuo.mutation.SetFromDate(t)
	return tuo
}

// SetToDate sets the "to_date" field.
func (tuo *TitleUpdateOne) SetToDate(t time.Time) *TitleUpdateOne {
	tuo.mutation.SetToDate(t)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TitleUpdateOne) SetCreatedAt(t time.Time) *TitleUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TitleUpdateOne) SetNillableCreatedAt(t *time.Time) *TitleUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tuo *TitleUpdateOne) ClearCreatedAt() *TitleUpdateOne {
	tuo.mutation.ClearCreatedAt()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TitleUpdateOne) SetUpdatedAt(t time.Time) *TitleUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TitleUpdateOne) SetNillableUpdatedAt(t *time.Time) *TitleUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TitleUpdateOne) ClearUpdatedAt() *TitleUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (tuo *TitleUpdateOne) SetEmployee(e *Employee) *TitleUpdateOne {
	return tuo.SetEmployeeID(e.ID)
}

// Mutation returns the TitleMutation object of the builder.
func (tuo *TitleUpdateOne) Mutation() *TitleMutation {
	return tuo.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (tuo *TitleUpdateOne) ClearEmployee() *TitleUpdateOne {
	tuo.mutation.ClearEmployee()
	return tuo
}

// Where appends a list predicates to the TitleUpdate builder.
func (tuo *TitleUpdateOne) Where(ps ...predicate.Title) *TitleUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TitleUpdateOne) Select(field string, fields ...string) *TitleUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Title entity.
func (tuo *TitleUpdateOne) Save(ctx context.Context) (*Title, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TitleUpdateOne) SaveX(ctx context.Context) *Title {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TitleUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TitleUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TitleUpdateOne) sqlSave(ctx context.Context) (_node *Title, err error) {
	_spec := sqlgraph.NewUpdateSpec(title.Table, title.Columns, sqlgraph.NewFieldSpec(title.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Title.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, title.FieldID)
		for _, f := range fields {
			if !title.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != title.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(title.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.FromDate(); ok {
		_spec.SetField(title.FieldFromDate, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.ToDate(); ok {
		_spec.SetField(title.FieldToDate, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(title.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(title.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(title.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(title.FieldUpdatedAt, field.TypeTime)
	}
	if tuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   title.EmployeeTable,
			Columns: []string{title.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   title.EmployeeTable,
			Columns: []string{title.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Title{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{title.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
