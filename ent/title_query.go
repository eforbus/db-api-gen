// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"employees/ent/employee"
	"employees/ent/predicate"
	"employees/ent/title"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TitleQuery is the builder for querying Title entities.
type TitleQuery struct {
	config
	ctx          *QueryContext
	order        []title.OrderOption
	inters       []Interceptor
	predicates   []predicate.Title
	withEmployee *EmployeeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TitleQuery builder.
func (tq *TitleQuery) Where(ps ...predicate.Title) *TitleQuery {
	tq.predicates = append(tq.predicates, ps...)
	return tq
}

// Limit the number of records to be returned by this query.
func (tq *TitleQuery) Limit(limit int) *TitleQuery {
	tq.ctx.Limit = &limit
	return tq
}

// Offset to start from.
func (tq *TitleQuery) Offset(offset int) *TitleQuery {
	tq.ctx.Offset = &offset
	return tq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tq *TitleQuery) Unique(unique bool) *TitleQuery {
	tq.ctx.Unique = &unique
	return tq
}

// Order specifies how the records should be ordered.
func (tq *TitleQuery) Order(o ...title.OrderOption) *TitleQuery {
	tq.order = append(tq.order, o...)
	return tq
}

// QueryEmployee chains the current query on the "employee" edge.
func (tq *TitleQuery) QueryEmployee() *EmployeeQuery {
	query := (&EmployeeClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(title.Table, title.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, title.EmployeeTable, title.EmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Title entity from the query.
// Returns a *NotFoundError when no Title was found.
func (tq *TitleQuery) First(ctx context.Context) (*Title, error) {
	nodes, err := tq.Limit(1).All(setContextOp(ctx, tq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{title.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tq *TitleQuery) FirstX(ctx context.Context) *Title {
	node, err := tq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Title ID from the query.
// Returns a *NotFoundError when no Title ID was found.
func (tq *TitleQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tq.Limit(1).IDs(setContextOp(ctx, tq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{title.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tq *TitleQuery) FirstIDX(ctx context.Context) string {
	id, err := tq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Title entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Title entity is found.
// Returns a *NotFoundError when no Title entities are found.
func (tq *TitleQuery) Only(ctx context.Context) (*Title, error) {
	nodes, err := tq.Limit(2).All(setContextOp(ctx, tq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{title.Label}
	default:
		return nil, &NotSingularError{title.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tq *TitleQuery) OnlyX(ctx context.Context) *Title {
	node, err := tq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Title ID in the query.
// Returns a *NotSingularError when more than one Title ID is found.
// Returns a *NotFoundError when no entities are found.
func (tq *TitleQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tq.Limit(2).IDs(setContextOp(ctx, tq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{title.Label}
	default:
		err = &NotSingularError{title.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tq *TitleQuery) OnlyIDX(ctx context.Context) string {
	id, err := tq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Titles.
func (tq *TitleQuery) All(ctx context.Context) ([]*Title, error) {
	ctx = setContextOp(ctx, tq.ctx, "All")
	if err := tq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Title, *TitleQuery]()
	return withInterceptors[[]*Title](ctx, tq, qr, tq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tq *TitleQuery) AllX(ctx context.Context) []*Title {
	nodes, err := tq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Title IDs.
func (tq *TitleQuery) IDs(ctx context.Context) (ids []string, err error) {
	if tq.ctx.Unique == nil && tq.path != nil {
		tq.Unique(true)
	}
	ctx = setContextOp(ctx, tq.ctx, "IDs")
	if err = tq.Select(title.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tq *TitleQuery) IDsX(ctx context.Context) []string {
	ids, err := tq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tq *TitleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tq.ctx, "Count")
	if err := tq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tq, querierCount[*TitleQuery](), tq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tq *TitleQuery) CountX(ctx context.Context) int {
	count, err := tq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tq *TitleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tq.ctx, "Exist")
	switch _, err := tq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tq *TitleQuery) ExistX(ctx context.Context) bool {
	exist, err := tq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TitleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tq *TitleQuery) Clone() *TitleQuery {
	if tq == nil {
		return nil
	}
	return &TitleQuery{
		config:       tq.config,
		ctx:          tq.ctx.Clone(),
		order:        append([]title.OrderOption{}, tq.order...),
		inters:       append([]Interceptor{}, tq.inters...),
		predicates:   append([]predicate.Title{}, tq.predicates...),
		withEmployee: tq.withEmployee.Clone(),
		// clone intermediate query.
		sql:  tq.sql.Clone(),
		path: tq.path,
	}
}

// WithEmployee tells the query-builder to eager-load the nodes that are connected to
// the "employee" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TitleQuery) WithEmployee(opts ...func(*EmployeeQuery)) *TitleQuery {
	query := (&EmployeeClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withEmployee = query
	return tq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		EmployeeID string `json:"employee_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Title.Query().
//		GroupBy(title.FieldEmployeeID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tq *TitleQuery) GroupBy(field string, fields ...string) *TitleGroupBy {
	tq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TitleGroupBy{build: tq}
	grbuild.flds = &tq.ctx.Fields
	grbuild.label = title.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		EmployeeID string `json:"employee_id,omitempty"`
//	}
//
//	client.Title.Query().
//		Select(title.FieldEmployeeID).
//		Scan(ctx, &v)
func (tq *TitleQuery) Select(fields ...string) *TitleSelect {
	tq.ctx.Fields = append(tq.ctx.Fields, fields...)
	sbuild := &TitleSelect{TitleQuery: tq}
	sbuild.label = title.Label
	sbuild.flds, sbuild.scan = &tq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TitleSelect configured with the given aggregations.
func (tq *TitleQuery) Aggregate(fns ...AggregateFunc) *TitleSelect {
	return tq.Select().Aggregate(fns...)
}

func (tq *TitleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tq); err != nil {
				return err
			}
		}
	}
	for _, f := range tq.ctx.Fields {
		if !title.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tq.path != nil {
		prev, err := tq.path(ctx)
		if err != nil {
			return err
		}
		tq.sql = prev
	}
	return nil
}

func (tq *TitleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Title, error) {
	var (
		nodes       = []*Title{}
		_spec       = tq.querySpec()
		loadedTypes = [1]bool{
			tq.withEmployee != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Title).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Title{config: tq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tq.withEmployee; query != nil {
		if err := tq.loadEmployee(ctx, query, nodes, nil,
			func(n *Title, e *Employee) { n.Edges.Employee = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tq *TitleQuery) loadEmployee(ctx context.Context, query *EmployeeQuery, nodes []*Title, init func(*Title), assign func(*Title, *Employee)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Title)
	for i := range nodes {
		fk := nodes[i].EmployeeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(employee.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "employee_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tq *TitleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tq.querySpec()
	_spec.Node.Columns = tq.ctx.Fields
	if len(tq.ctx.Fields) > 0 {
		_spec.Unique = tq.ctx.Unique != nil && *tq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tq.driver, _spec)
}

func (tq *TitleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(title.Table, title.Columns, sqlgraph.NewFieldSpec(title.FieldID, field.TypeString))
	_spec.From = tq.sql
	if unique := tq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tq.path != nil {
		_spec.Unique = true
	}
	if fields := tq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, title.FieldID)
		for i := range fields {
			if fields[i] != title.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tq.withEmployee != nil {
			_spec.Node.AddColumnOnce(title.FieldEmployeeID)
		}
	}
	if ps := tq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tq *TitleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tq.driver.Dialect())
	t1 := builder.Table(title.Table)
	columns := tq.ctx.Fields
	if len(columns) == 0 {
		columns = title.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tq.sql != nil {
		selector = tq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tq.ctx.Unique != nil && *tq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tq.predicates {
		p(selector)
	}
	for _, p := range tq.order {
		p(selector)
	}
	if offset := tq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TitleGroupBy is the group-by builder for Title entities.
type TitleGroupBy struct {
	selector
	build *TitleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tgb *TitleGroupBy) Aggregate(fns ...AggregateFunc) *TitleGroupBy {
	tgb.fns = append(tgb.fns, fns...)
	return tgb
}

// Scan applies the selector query and scans the result into the given value.
func (tgb *TitleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tgb.build.ctx, "GroupBy")
	if err := tgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TitleQuery, *TitleGroupBy](ctx, tgb.build, tgb, tgb.build.inters, v)
}

func (tgb *TitleGroupBy) sqlScan(ctx context.Context, root *TitleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tgb.fns))
	for _, fn := range tgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tgb.flds)+len(tgb.fns))
		for _, f := range *tgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TitleSelect is the builder for selecting fields of Title entities.
type TitleSelect struct {
	*TitleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ts *TitleSelect) Aggregate(fns ...AggregateFunc) *TitleSelect {
	ts.fns = append(ts.fns, fns...)
	return ts
}

// Scan applies the selector query and scans the result into the given value.
func (ts *TitleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ts.ctx, "Select")
	if err := ts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TitleQuery, *TitleSelect](ctx, ts.TitleQuery, ts, ts.inters, v)
}

func (ts *TitleSelect) sqlScan(ctx context.Context, root *TitleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ts.fns))
	for _, fn := range ts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
