// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"employees/ent/deptemployee"
	"employees/ent/deptmanager"
	"employees/ent/employee"
	"employees/ent/predicate"
	"employees/ent/salary"
	"employees/ent/title"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetBirthDate sets the "birth_date" field.
func (eu *EmployeeUpdate) SetBirthDate(t time.Time) *EmployeeUpdate {
	eu.mutation.SetBirthDate(t)
	return eu
}

// SetFirstName sets the "first_name" field.
func (eu *EmployeeUpdate) SetFirstName(s string) *EmployeeUpdate {
	eu.mutation.SetFirstName(s)
	return eu
}

// SetLastName sets the "last_name" field.
func (eu *EmployeeUpdate) SetLastName(s string) *EmployeeUpdate {
	eu.mutation.SetLastName(s)
	return eu
}

// SetGender sets the "gender" field.
func (eu *EmployeeUpdate) SetGender(e employee.Gender) *EmployeeUpdate {
	eu.mutation.SetGender(e)
	return eu
}

// SetHireDate sets the "hire_date" field.
func (eu *EmployeeUpdate) SetHireDate(t time.Time) *EmployeeUpdate {
	eu.mutation.SetHireDate(t)
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EmployeeUpdate) SetCreatedAt(t time.Time) *EmployeeUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableCreatedAt(t *time.Time) *EmployeeUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (eu *EmployeeUpdate) ClearCreatedAt() *EmployeeUpdate {
	eu.mutation.ClearCreatedAt()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EmployeeUpdate) SetUpdatedAt(t time.Time) *EmployeeUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableUpdatedAt(t *time.Time) *EmployeeUpdate {
	if t != nil {
		eu.SetUpdatedAt(*t)
	}
	return eu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (eu *EmployeeUpdate) ClearUpdatedAt() *EmployeeUpdate {
	eu.mutation.ClearUpdatedAt()
	return eu
}

// AddDeptEmployeeIDs adds the "dept_employees" edge to the DeptEmployee entity by IDs.
func (eu *EmployeeUpdate) AddDeptEmployeeIDs(ids ...string) *EmployeeUpdate {
	eu.mutation.AddDeptEmployeeIDs(ids...)
	return eu
}

// AddDeptEmployees adds the "dept_employees" edges to the DeptEmployee entity.
func (eu *EmployeeUpdate) AddDeptEmployees(d ...*DeptEmployee) *EmployeeUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDeptEmployeeIDs(ids...)
}

// AddDeptManagerIDs adds the "dept_managers" edge to the DeptManager entity by IDs.
func (eu *EmployeeUpdate) AddDeptManagerIDs(ids ...string) *EmployeeUpdate {
	eu.mutation.AddDeptManagerIDs(ids...)
	return eu
}

// AddDeptManagers adds the "dept_managers" edges to the DeptManager entity.
func (eu *EmployeeUpdate) AddDeptManagers(d ...*DeptManager) *EmployeeUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDeptManagerIDs(ids...)
}

// AddSalaryIDs adds the "salaries" edge to the Salary entity by IDs.
func (eu *EmployeeUpdate) AddSalaryIDs(ids ...string) *EmployeeUpdate {
	eu.mutation.AddSalaryIDs(ids...)
	return eu
}

// AddSalaries adds the "salaries" edges to the Salary entity.
func (eu *EmployeeUpdate) AddSalaries(s ...*Salary) *EmployeeUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddSalaryIDs(ids...)
}

// AddTitleIDs adds the "titles" edge to the Title entity by IDs.
func (eu *EmployeeUpdate) AddTitleIDs(ids ...string) *EmployeeUpdate {
	eu.mutation.AddTitleIDs(ids...)
	return eu
}

// AddTitles adds the "titles" edges to the Title entity.
func (eu *EmployeeUpdate) AddTitles(t ...*Title) *EmployeeUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTitleIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// ClearDeptEmployees clears all "dept_employees" edges to the DeptEmployee entity.
func (eu *EmployeeUpdate) ClearDeptEmployees() *EmployeeUpdate {
	eu.mutation.ClearDeptEmployees()
	return eu
}

// RemoveDeptEmployeeIDs removes the "dept_employees" edge to DeptEmployee entities by IDs.
func (eu *EmployeeUpdate) RemoveDeptEmployeeIDs(ids ...string) *EmployeeUpdate {
	eu.mutation.RemoveDeptEmployeeIDs(ids...)
	return eu
}

// RemoveDeptEmployees removes "dept_employees" edges to DeptEmployee entities.
func (eu *EmployeeUpdate) RemoveDeptEmployees(d ...*DeptEmployee) *EmployeeUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDeptEmployeeIDs(ids...)
}

// ClearDeptManagers clears all "dept_managers" edges to the DeptManager entity.
func (eu *EmployeeUpdate) ClearDeptManagers() *EmployeeUpdate {
	eu.mutation.ClearDeptManagers()
	return eu
}

// RemoveDeptManagerIDs removes the "dept_managers" edge to DeptManager entities by IDs.
func (eu *EmployeeUpdate) RemoveDeptManagerIDs(ids ...string) *EmployeeUpdate {
	eu.mutation.RemoveDeptManagerIDs(ids...)
	return eu
}

// RemoveDeptManagers removes "dept_managers" edges to DeptManager entities.
func (eu *EmployeeUpdate) RemoveDeptManagers(d ...*DeptManager) *EmployeeUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDeptManagerIDs(ids...)
}

// ClearSalaries clears all "salaries" edges to the Salary entity.
func (eu *EmployeeUpdate) ClearSalaries() *EmployeeUpdate {
	eu.mutation.ClearSalaries()
	return eu
}

// RemoveSalaryIDs removes the "salaries" edge to Salary entities by IDs.
func (eu *EmployeeUpdate) RemoveSalaryIDs(ids ...string) *EmployeeUpdate {
	eu.mutation.RemoveSalaryIDs(ids...)
	return eu
}

// RemoveSalaries removes "salaries" edges to Salary entities.
func (eu *EmployeeUpdate) RemoveSalaries(s ...*Salary) *EmployeeUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveSalaryIDs(ids...)
}

// ClearTitles clears all "titles" edges to the Title entity.
func (eu *EmployeeUpdate) ClearTitles() *EmployeeUpdate {
	eu.mutation.ClearTitles()
	return eu
}

// RemoveTitleIDs removes the "titles" edge to Title entities by IDs.
func (eu *EmployeeUpdate) RemoveTitleIDs(ids ...string) *EmployeeUpdate {
	eu.mutation.RemoveTitleIDs(ids...)
	return eu
}

// RemoveTitles removes "titles" edges to Title entities.
func (eu *EmployeeUpdate) RemoveTitles(t ...*Title) *EmployeeUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTitleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmployeeUpdate) check() error {
	if v, ok := eu.mutation.Gender(); ok {
		if err := employee.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Employee.gender": %w`, err)}
		}
	}
	return nil
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.BirthDate(); ok {
		_spec.SetField(employee.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := eu.mutation.FirstName(); ok {
		_spec.SetField(employee.FieldFirstName, field.TypeString, value)
	}
	if value, ok := eu.mutation.LastName(); ok {
		_spec.SetField(employee.FieldLastName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Gender(); ok {
		_spec.SetField(employee.FieldGender, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.HireDate(); ok {
		_spec.SetField(employee.FieldHireDate, field.TypeTime, value)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(employee.FieldCreatedAt, field.TypeTime, value)
	}
	if eu.mutation.CreatedAtCleared() {
		_spec.ClearField(employee.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.UpdatedAtCleared() {
		_spec.ClearField(employee.FieldUpdatedAt, field.TypeTime)
	}
	if eu.mutation.DeptEmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptEmployeesTable,
			Columns: []string{employee.DeptEmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptemployee.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDeptEmployeesIDs(); len(nodes) > 0 && !eu.mutation.DeptEmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptEmployeesTable,
			Columns: []string{employee.DeptEmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptemployee.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DeptEmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptEmployeesTable,
			Columns: []string{employee.DeptEmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptemployee.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DeptManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptManagersTable,
			Columns: []string{employee.DeptManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptmanager.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDeptManagersIDs(); len(nodes) > 0 && !eu.mutation.DeptManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptManagersTable,
			Columns: []string{employee.DeptManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptmanager.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DeptManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptManagersTable,
			Columns: []string{employee.DeptManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptmanager.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SalariesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalariesTable,
			Columns: []string{employee.SalariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salary.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedSalariesIDs(); len(nodes) > 0 && !eu.mutation.SalariesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalariesTable,
			Columns: []string{employee.SalariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salary.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SalariesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalariesTable,
			Columns: []string{employee.SalariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salary.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TitlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TitlesTable,
			Columns: []string{employee.TitlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(title.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTitlesIDs(); len(nodes) > 0 && !eu.mutation.TitlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TitlesTable,
			Columns: []string{employee.TitlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(title.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TitlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TitlesTable,
			Columns: []string{employee.TitlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(title.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeMutation
}

// SetBirthDate sets the "birth_date" field.
func (euo *EmployeeUpdateOne) SetBirthDate(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetBirthDate(t)
	return euo
}

// SetFirstName sets the "first_name" field.
func (euo *EmployeeUpdateOne) SetFirstName(s string) *EmployeeUpdateOne {
	euo.mutation.SetFirstName(s)
	return euo
}

// SetLastName sets the "last_name" field.
func (euo *EmployeeUpdateOne) SetLastName(s string) *EmployeeUpdateOne {
	euo.mutation.SetLastName(s)
	return euo
}

// SetGender sets the "gender" field.
func (euo *EmployeeUpdateOne) SetGender(e employee.Gender) *EmployeeUpdateOne {
	euo.mutation.SetGender(e)
	return euo
}

// SetHireDate sets the "hire_date" field.
func (euo *EmployeeUpdateOne) SetHireDate(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetHireDate(t)
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EmployeeUpdateOne) SetCreatedAt(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableCreatedAt(t *time.Time) *EmployeeUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (euo *EmployeeUpdateOne) ClearCreatedAt() *EmployeeUpdateOne {
	euo.mutation.ClearCreatedAt()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EmployeeUpdateOne) SetUpdatedAt(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableUpdatedAt(t *time.Time) *EmployeeUpdateOne {
	if t != nil {
		euo.SetUpdatedAt(*t)
	}
	return euo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (euo *EmployeeUpdateOne) ClearUpdatedAt() *EmployeeUpdateOne {
	euo.mutation.ClearUpdatedAt()
	return euo
}

// AddDeptEmployeeIDs adds the "dept_employees" edge to the DeptEmployee entity by IDs.
func (euo *EmployeeUpdateOne) AddDeptEmployeeIDs(ids ...string) *EmployeeUpdateOne {
	euo.mutation.AddDeptEmployeeIDs(ids...)
	return euo
}

// AddDeptEmployees adds the "dept_employees" edges to the DeptEmployee entity.
func (euo *EmployeeUpdateOne) AddDeptEmployees(d ...*DeptEmployee) *EmployeeUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDeptEmployeeIDs(ids...)
}

// AddDeptManagerIDs adds the "dept_managers" edge to the DeptManager entity by IDs.
func (euo *EmployeeUpdateOne) AddDeptManagerIDs(ids ...string) *EmployeeUpdateOne {
	euo.mutation.AddDeptManagerIDs(ids...)
	return euo
}

// AddDeptManagers adds the "dept_managers" edges to the DeptManager entity.
func (euo *EmployeeUpdateOne) AddDeptManagers(d ...*DeptManager) *EmployeeUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDeptManagerIDs(ids...)
}

// AddSalaryIDs adds the "salaries" edge to the Salary entity by IDs.
func (euo *EmployeeUpdateOne) AddSalaryIDs(ids ...string) *EmployeeUpdateOne {
	euo.mutation.AddSalaryIDs(ids...)
	return euo
}

// AddSalaries adds the "salaries" edges to the Salary entity.
func (euo *EmployeeUpdateOne) AddSalaries(s ...*Salary) *EmployeeUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddSalaryIDs(ids...)
}

// AddTitleIDs adds the "titles" edge to the Title entity by IDs.
func (euo *EmployeeUpdateOne) AddTitleIDs(ids ...string) *EmployeeUpdateOne {
	euo.mutation.AddTitleIDs(ids...)
	return euo
}

// AddTitles adds the "titles" edges to the Title entity.
func (euo *EmployeeUpdateOne) AddTitles(t ...*Title) *EmployeeUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTitleIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// ClearDeptEmployees clears all "dept_employees" edges to the DeptEmployee entity.
func (euo *EmployeeUpdateOne) ClearDeptEmployees() *EmployeeUpdateOne {
	euo.mutation.ClearDeptEmployees()
	return euo
}

// RemoveDeptEmployeeIDs removes the "dept_employees" edge to DeptEmployee entities by IDs.
func (euo *EmployeeUpdateOne) RemoveDeptEmployeeIDs(ids ...string) *EmployeeUpdateOne {
	euo.mutation.RemoveDeptEmployeeIDs(ids...)
	return euo
}

// RemoveDeptEmployees removes "dept_employees" edges to DeptEmployee entities.
func (euo *EmployeeUpdateOne) RemoveDeptEmployees(d ...*DeptEmployee) *EmployeeUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDeptEmployeeIDs(ids...)
}

// ClearDeptManagers clears all "dept_managers" edges to the DeptManager entity.
func (euo *EmployeeUpdateOne) ClearDeptManagers() *EmployeeUpdateOne {
	euo.mutation.ClearDeptManagers()
	return euo
}

// RemoveDeptManagerIDs removes the "dept_managers" edge to DeptManager entities by IDs.
func (euo *EmployeeUpdateOne) RemoveDeptManagerIDs(ids ...string) *EmployeeUpdateOne {
	euo.mutation.RemoveDeptManagerIDs(ids...)
	return euo
}

// RemoveDeptManagers removes "dept_managers" edges to DeptManager entities.
func (euo *EmployeeUpdateOne) RemoveDeptManagers(d ...*DeptManager) *EmployeeUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDeptManagerIDs(ids...)
}

// ClearSalaries clears all "salaries" edges to the Salary entity.
func (euo *EmployeeUpdateOne) ClearSalaries() *EmployeeUpdateOne {
	euo.mutation.ClearSalaries()
	return euo
}

// RemoveSalaryIDs removes the "salaries" edge to Salary entities by IDs.
func (euo *EmployeeUpdateOne) RemoveSalaryIDs(ids ...string) *EmployeeUpdateOne {
	euo.mutation.RemoveSalaryIDs(ids...)
	return euo
}

// RemoveSalaries removes "salaries" edges to Salary entities.
func (euo *EmployeeUpdateOne) RemoveSalaries(s ...*Salary) *EmployeeUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveSalaryIDs(ids...)
}

// ClearTitles clears all "titles" edges to the Title entity.
func (euo *EmployeeUpdateOne) ClearTitles() *EmployeeUpdateOne {
	euo.mutation.ClearTitles()
	return euo
}

// RemoveTitleIDs removes the "titles" edge to Title entities by IDs.
func (euo *EmployeeUpdateOne) RemoveTitleIDs(ids ...string) *EmployeeUpdateOne {
	euo.mutation.RemoveTitleIDs(ids...)
	return euo
}

// RemoveTitles removes "titles" edges to Title entities.
func (euo *EmployeeUpdateOne) RemoveTitles(t ...*Title) *EmployeeUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTitleIDs(ids...)
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (euo *EmployeeUpdateOne) Where(ps ...predicate.Employee) *EmployeeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmployeeUpdateOne) Select(field string, fields ...string) *EmployeeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Employee entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmployeeUpdateOne) check() error {
	if v, ok := euo.mutation.Gender(); ok {
		if err := employee.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Employee.gender": %w`, err)}
		}
	}
	return nil
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (_node *Employee, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Employee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for _, f := range fields {
			if !employee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.BirthDate(); ok {
		_spec.SetField(employee.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := euo.mutation.FirstName(); ok {
		_spec.SetField(employee.FieldFirstName, field.TypeString, value)
	}
	if value, ok := euo.mutation.LastName(); ok {
		_spec.SetField(employee.FieldLastName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Gender(); ok {
		_spec.SetField(employee.FieldGender, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.HireDate(); ok {
		_spec.SetField(employee.FieldHireDate, field.TypeTime, value)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(employee.FieldCreatedAt, field.TypeTime, value)
	}
	if euo.mutation.CreatedAtCleared() {
		_spec.ClearField(employee.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.UpdatedAtCleared() {
		_spec.ClearField(employee.FieldUpdatedAt, field.TypeTime)
	}
	if euo.mutation.DeptEmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptEmployeesTable,
			Columns: []string{employee.DeptEmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptemployee.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDeptEmployeesIDs(); len(nodes) > 0 && !euo.mutation.DeptEmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptEmployeesTable,
			Columns: []string{employee.DeptEmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptemployee.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DeptEmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptEmployeesTable,
			Columns: []string{employee.DeptEmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptemployee.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DeptManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptManagersTable,
			Columns: []string{employee.DeptManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptmanager.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDeptManagersIDs(); len(nodes) > 0 && !euo.mutation.DeptManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptManagersTable,
			Columns: []string{employee.DeptManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptmanager.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DeptManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptManagersTable,
			Columns: []string{employee.DeptManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptmanager.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SalariesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalariesTable,
			Columns: []string{employee.SalariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salary.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedSalariesIDs(); len(nodes) > 0 && !euo.mutation.SalariesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalariesTable,
			Columns: []string{employee.SalariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salary.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SalariesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalariesTable,
			Columns: []string{employee.SalariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salary.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TitlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TitlesTable,
			Columns: []string{employee.TitlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(title.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTitlesIDs(); len(nodes) > 0 && !euo.mutation.TitlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TitlesTable,
			Columns: []string{employee.TitlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(title.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TitlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TitlesTable,
			Columns: []string{employee.TitlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(title.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Employee{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
