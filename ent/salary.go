// Code generated by ent, DO NOT EDIT.

package ent

import (
	"employees/ent/employee"
	"employees/ent/salary"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Salary is the model entity for the Salary schema.
type Salary struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// EmployeeID holds the value of the "employee_id" field.
	EmployeeID string `json:"employee_id,omitempty"`
	// Salary holds the value of the "salary" field.
	Salary int32 `json:"salary,omitempty"`
	// FromDate holds the value of the "from_date" field.
	FromDate time.Time `json:"from_date,omitempty"`
	// ToDate holds the value of the "to_date" field.
	ToDate time.Time `json:"to_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SalaryQuery when eager-loading is set.
	Edges        SalaryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SalaryEdges holds the relations/edges for other nodes in the graph.
type SalaryEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SalaryEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.Employee == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Salary) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case salary.FieldSalary:
			values[i] = new(sql.NullInt64)
		case salary.FieldID, salary.FieldEmployeeID:
			values[i] = new(sql.NullString)
		case salary.FieldFromDate, salary.FieldToDate, salary.FieldCreatedAt, salary.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Salary fields.
func (s *Salary) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case salary.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case salary.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				s.EmployeeID = value.String
			}
		case salary.FieldSalary:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field salary", values[i])
			} else if value.Valid {
				s.Salary = int32(value.Int64)
			}
		case salary.FieldFromDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field from_date", values[i])
			} else if value.Valid {
				s.FromDate = value.Time
			}
		case salary.FieldToDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field to_date", values[i])
			} else if value.Valid {
				s.ToDate = value.Time
			}
		case salary.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case salary.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Salary.
// This includes values selected through modifiers, order, etc.
func (s *Salary) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryEmployee queries the "employee" edge of the Salary entity.
func (s *Salary) QueryEmployee() *EmployeeQuery {
	return NewSalaryClient(s.config).QueryEmployee(s)
}

// Update returns a builder for updating this Salary.
// Note that you need to call Salary.Unwrap() before calling this method if this Salary
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Salary) Update() *SalaryUpdateOne {
	return NewSalaryClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Salary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Salary) Unwrap() *Salary {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Salary is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Salary) String() string {
	var builder strings.Builder
	builder.WriteString("Salary(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("employee_id=")
	builder.WriteString(s.EmployeeID)
	builder.WriteString(", ")
	builder.WriteString("salary=")
	builder.WriteString(fmt.Sprintf("%v", s.Salary))
	builder.WriteString(", ")
	builder.WriteString("from_date=")
	builder.WriteString(s.FromDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("to_date=")
	builder.WriteString(s.ToDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Salaries is a parsable slice of Salary.
type Salaries []*Salary
