// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"employees/ent/department"
	"employees/ent/deptmanager"
	"employees/ent/employee"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeptManagerCreate is the builder for creating a DeptManager entity.
type DeptManagerCreate struct {
	config
	mutation *DeptManagerMutation
	hooks    []Hook
}

// SetEmployeeID sets the "employee_id" field.
func (dmc *DeptManagerCreate) SetEmployeeID(s string) *DeptManagerCreate {
	dmc.mutation.SetEmployeeID(s)
	return dmc
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (dmc *DeptManagerCreate) SetNillableEmployeeID(s *string) *DeptManagerCreate {
	if s != nil {
		dmc.SetEmployeeID(*s)
	}
	return dmc
}

// SetDepartmentID sets the "department_id" field.
func (dmc *DeptManagerCreate) SetDepartmentID(s string) *DeptManagerCreate {
	dmc.mutation.SetDepartmentID(s)
	return dmc
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (dmc *DeptManagerCreate) SetNillableDepartmentID(s *string) *DeptManagerCreate {
	if s != nil {
		dmc.SetDepartmentID(*s)
	}
	return dmc
}

// SetFromDate sets the "from_date" field.
func (dmc *DeptManagerCreate) SetFromDate(t time.Time) *DeptManagerCreate {
	dmc.mutation.SetFromDate(t)
	return dmc
}

// SetToDate sets the "to_date" field.
func (dmc *DeptManagerCreate) SetToDate(t time.Time) *DeptManagerCreate {
	dmc.mutation.SetToDate(t)
	return dmc
}

// SetCreatedAt sets the "created_at" field.
func (dmc *DeptManagerCreate) SetCreatedAt(t time.Time) *DeptManagerCreate {
	dmc.mutation.SetCreatedAt(t)
	return dmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dmc *DeptManagerCreate) SetNillableCreatedAt(t *time.Time) *DeptManagerCreate {
	if t != nil {
		dmc.SetCreatedAt(*t)
	}
	return dmc
}

// SetUpdatedAt sets the "updated_at" field.
func (dmc *DeptManagerCreate) SetUpdatedAt(t time.Time) *DeptManagerCreate {
	dmc.mutation.SetUpdatedAt(t)
	return dmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dmc *DeptManagerCreate) SetNillableUpdatedAt(t *time.Time) *DeptManagerCreate {
	if t != nil {
		dmc.SetUpdatedAt(*t)
	}
	return dmc
}

// SetID sets the "id" field.
func (dmc *DeptManagerCreate) SetID(s string) *DeptManagerCreate {
	dmc.mutation.SetID(s)
	return dmc
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (dmc *DeptManagerCreate) SetEmployee(e *Employee) *DeptManagerCreate {
	return dmc.SetEmployeeID(e.ID)
}

// SetDepartment sets the "department" edge to the Department entity.
func (dmc *DeptManagerCreate) SetDepartment(d *Department) *DeptManagerCreate {
	return dmc.SetDepartmentID(d.ID)
}

// Mutation returns the DeptManagerMutation object of the builder.
func (dmc *DeptManagerCreate) Mutation() *DeptManagerMutation {
	return dmc.mutation
}

// Save creates the DeptManager in the database.
func (dmc *DeptManagerCreate) Save(ctx context.Context) (*DeptManager, error) {
	return withHooks(ctx, dmc.sqlSave, dmc.mutation, dmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dmc *DeptManagerCreate) SaveX(ctx context.Context) *DeptManager {
	v, err := dmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmc *DeptManagerCreate) Exec(ctx context.Context) error {
	_, err := dmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmc *DeptManagerCreate) ExecX(ctx context.Context) {
	if err := dmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmc *DeptManagerCreate) check() error {
	if _, ok := dmc.mutation.FromDate(); !ok {
		return &ValidationError{Name: "from_date", err: errors.New(`ent: missing required field "DeptManager.from_date"`)}
	}
	if _, ok := dmc.mutation.ToDate(); !ok {
		return &ValidationError{Name: "to_date", err: errors.New(`ent: missing required field "DeptManager.to_date"`)}
	}
	return nil
}

func (dmc *DeptManagerCreate) sqlSave(ctx context.Context) (*DeptManager, error) {
	if err := dmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected DeptManager.ID type: %T", _spec.ID.Value)
		}
	}
	dmc.mutation.id = &_node.ID
	dmc.mutation.done = true
	return _node, nil
}

func (dmc *DeptManagerCreate) createSpec() (*DeptManager, *sqlgraph.CreateSpec) {
	var (
		_node = &DeptManager{config: dmc.config}
		_spec = sqlgraph.NewCreateSpec(deptmanager.Table, sqlgraph.NewFieldSpec(deptmanager.FieldID, field.TypeString))
	)
	if id, ok := dmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dmc.mutation.FromDate(); ok {
		_spec.SetField(deptmanager.FieldFromDate, field.TypeTime, value)
		_node.FromDate = value
	}
	if value, ok := dmc.mutation.ToDate(); ok {
		_spec.SetField(deptmanager.FieldToDate, field.TypeTime, value)
		_node.ToDate = value
	}
	if value, ok := dmc.mutation.CreatedAt(); ok {
		_spec.SetField(deptmanager.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dmc.mutation.UpdatedAt(); ok {
		_spec.SetField(deptmanager.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := dmc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptmanager.EmployeeTable,
			Columns: []string{deptmanager.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dmc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deptmanager.DepartmentTable,
			Columns: []string{deptmanager.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DepartmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeptManagerCreateBulk is the builder for creating many DeptManager entities in bulk.
type DeptManagerCreateBulk struct {
	config
	err      error
	builders []*DeptManagerCreate
}

// Save creates the DeptManager entities in the database.
func (dmcb *DeptManagerCreateBulk) Save(ctx context.Context) ([]*DeptManager, error) {
	if dmcb.err != nil {
		return nil, dmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dmcb.builders))
	nodes := make([]*DeptManager, len(dmcb.builders))
	mutators := make([]Mutator, len(dmcb.builders))
	for i := range dmcb.builders {
		func(i int, root context.Context) {
			builder := dmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeptManagerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dmcb *DeptManagerCreateBulk) SaveX(ctx context.Context) []*DeptManager {
	v, err := dmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmcb *DeptManagerCreateBulk) Exec(ctx context.Context) error {
	_, err := dmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmcb *DeptManagerCreateBulk) ExecX(ctx context.Context) {
	if err := dmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
