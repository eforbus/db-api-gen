// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"employees/ent/migrate"

	"employees/ent/department"
	"employees/ent/deptemployee"
	"employees/ent/deptmanager"
	"employees/ent/employee"
	"employees/ent/salary"
	"employees/ent/title"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// DeptEmployee is the client for interacting with the DeptEmployee builders.
	DeptEmployee *DeptEmployeeClient
	// DeptManager is the client for interacting with the DeptManager builders.
	DeptManager *DeptManagerClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Salary is the client for interacting with the Salary builders.
	Salary *SalaryClient
	// Title is the client for interacting with the Title builders.
	Title *TitleClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Department = NewDepartmentClient(c.config)
	c.DeptEmployee = NewDeptEmployeeClient(c.config)
	c.DeptManager = NewDeptManagerClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Salary = NewSalaryClient(c.config)
	c.Title = NewTitleClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Department:   NewDepartmentClient(cfg),
		DeptEmployee: NewDeptEmployeeClient(cfg),
		DeptManager:  NewDeptManagerClient(cfg),
		Employee:     NewEmployeeClient(cfg),
		Salary:       NewSalaryClient(cfg),
		Title:        NewTitleClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Department:   NewDepartmentClient(cfg),
		DeptEmployee: NewDeptEmployeeClient(cfg),
		DeptManager:  NewDeptManagerClient(cfg),
		Employee:     NewEmployeeClient(cfg),
		Salary:       NewSalaryClient(cfg),
		Title:        NewTitleClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Department.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Department, c.DeptEmployee, c.DeptManager, c.Employee, c.Salary, c.Title,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Department, c.DeptEmployee, c.DeptManager, c.Employee, c.Salary, c.Title,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DepartmentMutation:
		return c.Department.mutate(ctx, m)
	case *DeptEmployeeMutation:
		return c.DeptEmployee.mutate(ctx, m)
	case *DeptManagerMutation:
		return c.DeptManager.mutate(ctx, m)
	case *EmployeeMutation:
		return c.Employee.mutate(ctx, m)
	case *SalaryMutation:
		return c.Salary.mutate(ctx, m)
	case *TitleMutation:
		return c.Title.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `department.Intercept(f(g(h())))`.
func (c *DepartmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Department = append(c.inters.Department, interceptors...)
}

// Create returns a builder for creating a Department entity.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Department entities.
func (c *DepartmentClient) CreateBulk(builders ...*DepartmentCreate) *DepartmentCreateBulk {
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DepartmentClient) MapCreateBulk(slice any, setFunc func(*DepartmentCreate, int)) *DepartmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DepartmentCreateBulk{err: fmt.Errorf("calling to DepartmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DepartmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(d *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(d))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id string) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DepartmentClient) DeleteOne(d *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DepartmentClient) DeleteOneID(id string) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Query returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDepartment},
		inters: c.Interceptors(),
	}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id string) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id string) *Department {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeptEmployees queries the dept_employees edge of a Department.
func (c *DepartmentClient) QueryDeptEmployees(d *Department) *DeptEmployeeQuery {
	query := (&DeptEmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(deptemployee.Table, deptemployee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.DeptEmployeesTable, department.DeptEmployeesColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeptManagers queries the dept_managers edge of a Department.
func (c *DepartmentClient) QueryDeptManagers(d *Department) *DeptManagerQuery {
	query := (&DeptManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(deptmanager.Table, deptmanager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.DeptManagersTable, department.DeptManagersColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	return c.hooks.Department
}

// Interceptors returns the client interceptors.
func (c *DepartmentClient) Interceptors() []Interceptor {
	return c.inters.Department
}

func (c *DepartmentClient) mutate(ctx context.Context, m *DepartmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Department mutation op: %q", m.Op())
	}
}

// DeptEmployeeClient is a client for the DeptEmployee schema.
type DeptEmployeeClient struct {
	config
}

// NewDeptEmployeeClient returns a client for the DeptEmployee from the given config.
func NewDeptEmployeeClient(c config) *DeptEmployeeClient {
	return &DeptEmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deptemployee.Hooks(f(g(h())))`.
func (c *DeptEmployeeClient) Use(hooks ...Hook) {
	c.hooks.DeptEmployee = append(c.hooks.DeptEmployee, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deptemployee.Intercept(f(g(h())))`.
func (c *DeptEmployeeClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeptEmployee = append(c.inters.DeptEmployee, interceptors...)
}

// Create returns a builder for creating a DeptEmployee entity.
func (c *DeptEmployeeClient) Create() *DeptEmployeeCreate {
	mutation := newDeptEmployeeMutation(c.config, OpCreate)
	return &DeptEmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeptEmployee entities.
func (c *DeptEmployeeClient) CreateBulk(builders ...*DeptEmployeeCreate) *DeptEmployeeCreateBulk {
	return &DeptEmployeeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeptEmployeeClient) MapCreateBulk(slice any, setFunc func(*DeptEmployeeCreate, int)) *DeptEmployeeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeptEmployeeCreateBulk{err: fmt.Errorf("calling to DeptEmployeeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeptEmployeeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeptEmployeeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeptEmployee.
func (c *DeptEmployeeClient) Update() *DeptEmployeeUpdate {
	mutation := newDeptEmployeeMutation(c.config, OpUpdate)
	return &DeptEmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeptEmployeeClient) UpdateOne(de *DeptEmployee) *DeptEmployeeUpdateOne {
	mutation := newDeptEmployeeMutation(c.config, OpUpdateOne, withDeptEmployee(de))
	return &DeptEmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeptEmployeeClient) UpdateOneID(id string) *DeptEmployeeUpdateOne {
	mutation := newDeptEmployeeMutation(c.config, OpUpdateOne, withDeptEmployeeID(id))
	return &DeptEmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeptEmployee.
func (c *DeptEmployeeClient) Delete() *DeptEmployeeDelete {
	mutation := newDeptEmployeeMutation(c.config, OpDelete)
	return &DeptEmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeptEmployeeClient) DeleteOne(de *DeptEmployee) *DeptEmployeeDeleteOne {
	return c.DeleteOneID(de.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeptEmployeeClient) DeleteOneID(id string) *DeptEmployeeDeleteOne {
	builder := c.Delete().Where(deptemployee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeptEmployeeDeleteOne{builder}
}

// Query returns a query builder for DeptEmployee.
func (c *DeptEmployeeClient) Query() *DeptEmployeeQuery {
	return &DeptEmployeeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeptEmployee},
		inters: c.Interceptors(),
	}
}

// Get returns a DeptEmployee entity by its id.
func (c *DeptEmployeeClient) Get(ctx context.Context, id string) (*DeptEmployee, error) {
	return c.Query().Where(deptemployee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeptEmployeeClient) GetX(ctx context.Context, id string) *DeptEmployee {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmployee queries the employee edge of a DeptEmployee.
func (c *DeptEmployeeClient) QueryEmployee(de *DeptEmployee) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := de.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deptemployee.Table, deptemployee.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deptemployee.EmployeeTable, deptemployee.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(de.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartment queries the department edge of a DeptEmployee.
func (c *DeptEmployeeClient) QueryDepartment(de *DeptEmployee) *DepartmentQuery {
	query := (&DepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := de.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deptemployee.Table, deptemployee.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deptemployee.DepartmentTable, deptemployee.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(de.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeptEmployeeClient) Hooks() []Hook {
	return c.hooks.DeptEmployee
}

// Interceptors returns the client interceptors.
func (c *DeptEmployeeClient) Interceptors() []Interceptor {
	return c.inters.DeptEmployee
}

func (c *DeptEmployeeClient) mutate(ctx context.Context, m *DeptEmployeeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeptEmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeptEmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeptEmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeptEmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeptEmployee mutation op: %q", m.Op())
	}
}

// DeptManagerClient is a client for the DeptManager schema.
type DeptManagerClient struct {
	config
}

// NewDeptManagerClient returns a client for the DeptManager from the given config.
func NewDeptManagerClient(c config) *DeptManagerClient {
	return &DeptManagerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deptmanager.Hooks(f(g(h())))`.
func (c *DeptManagerClient) Use(hooks ...Hook) {
	c.hooks.DeptManager = append(c.hooks.DeptManager, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deptmanager.Intercept(f(g(h())))`.
func (c *DeptManagerClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeptManager = append(c.inters.DeptManager, interceptors...)
}

// Create returns a builder for creating a DeptManager entity.
func (c *DeptManagerClient) Create() *DeptManagerCreate {
	mutation := newDeptManagerMutation(c.config, OpCreate)
	return &DeptManagerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeptManager entities.
func (c *DeptManagerClient) CreateBulk(builders ...*DeptManagerCreate) *DeptManagerCreateBulk {
	return &DeptManagerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeptManagerClient) MapCreateBulk(slice any, setFunc func(*DeptManagerCreate, int)) *DeptManagerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeptManagerCreateBulk{err: fmt.Errorf("calling to DeptManagerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeptManagerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeptManagerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeptManager.
func (c *DeptManagerClient) Update() *DeptManagerUpdate {
	mutation := newDeptManagerMutation(c.config, OpUpdate)
	return &DeptManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeptManagerClient) UpdateOne(dm *DeptManager) *DeptManagerUpdateOne {
	mutation := newDeptManagerMutation(c.config, OpUpdateOne, withDeptManager(dm))
	return &DeptManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeptManagerClient) UpdateOneID(id string) *DeptManagerUpdateOne {
	mutation := newDeptManagerMutation(c.config, OpUpdateOne, withDeptManagerID(id))
	return &DeptManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeptManager.
func (c *DeptManagerClient) Delete() *DeptManagerDelete {
	mutation := newDeptManagerMutation(c.config, OpDelete)
	return &DeptManagerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeptManagerClient) DeleteOne(dm *DeptManager) *DeptManagerDeleteOne {
	return c.DeleteOneID(dm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeptManagerClient) DeleteOneID(id string) *DeptManagerDeleteOne {
	builder := c.Delete().Where(deptmanager.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeptManagerDeleteOne{builder}
}

// Query returns a query builder for DeptManager.
func (c *DeptManagerClient) Query() *DeptManagerQuery {
	return &DeptManagerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeptManager},
		inters: c.Interceptors(),
	}
}

// Get returns a DeptManager entity by its id.
func (c *DeptManagerClient) Get(ctx context.Context, id string) (*DeptManager, error) {
	return c.Query().Where(deptmanager.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeptManagerClient) GetX(ctx context.Context, id string) *DeptManager {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmployee queries the employee edge of a DeptManager.
func (c *DeptManagerClient) QueryEmployee(dm *DeptManager) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deptmanager.Table, deptmanager.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deptmanager.EmployeeTable, deptmanager.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartment queries the department edge of a DeptManager.
func (c *DeptManagerClient) QueryDepartment(dm *DeptManager) *DepartmentQuery {
	query := (&DepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deptmanager.Table, deptmanager.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deptmanager.DepartmentTable, deptmanager.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeptManagerClient) Hooks() []Hook {
	return c.hooks.DeptManager
}

// Interceptors returns the client interceptors.
func (c *DeptManagerClient) Interceptors() []Interceptor {
	return c.inters.DeptManager
}

func (c *DeptManagerClient) mutate(ctx context.Context, m *DeptManagerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeptManagerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeptManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeptManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeptManagerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeptManager mutation op: %q", m.Op())
	}
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employee.Intercept(f(g(h())))`.
func (c *EmployeeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Employee = append(c.inters.Employee, interceptors...)
}

// Create returns a builder for creating a Employee entity.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Employee entities.
func (c *EmployeeClient) CreateBulk(builders ...*EmployeeCreate) *EmployeeCreateBulk {
	return &EmployeeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmployeeClient) MapCreateBulk(slice any, setFunc func(*EmployeeCreate, int)) *EmployeeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmployeeCreateBulk{err: fmt.Errorf("calling to EmployeeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmployeeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmployeeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id string) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeClient) DeleteOneID(id string) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Query returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployee},
		inters: c.Interceptors(),
	}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id string) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id string) *Employee {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeptEmployees queries the dept_employees edge of a Employee.
func (c *EmployeeClient) QueryDeptEmployees(e *Employee) *DeptEmployeeQuery {
	query := (&DeptEmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(deptemployee.Table, deptemployee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.DeptEmployeesTable, employee.DeptEmployeesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeptManagers queries the dept_managers edge of a Employee.
func (c *EmployeeClient) QueryDeptManagers(e *Employee) *DeptManagerQuery {
	query := (&DeptManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(deptmanager.Table, deptmanager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.DeptManagersTable, employee.DeptManagersColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySalaries queries the salaries edge of a Employee.
func (c *EmployeeClient) QuerySalaries(e *Employee) *SalaryQuery {
	query := (&SalaryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(salary.Table, salary.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.SalariesTable, employee.SalariesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTitles queries the titles edge of a Employee.
func (c *EmployeeClient) QueryTitles(e *Employee) *TitleQuery {
	query := (&TitleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(title.Table, title.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.TitlesTable, employee.TitlesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// Interceptors returns the client interceptors.
func (c *EmployeeClient) Interceptors() []Interceptor {
	return c.inters.Employee
}

func (c *EmployeeClient) mutate(ctx context.Context, m *EmployeeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Employee mutation op: %q", m.Op())
	}
}

// SalaryClient is a client for the Salary schema.
type SalaryClient struct {
	config
}

// NewSalaryClient returns a client for the Salary from the given config.
func NewSalaryClient(c config) *SalaryClient {
	return &SalaryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `salary.Hooks(f(g(h())))`.
func (c *SalaryClient) Use(hooks ...Hook) {
	c.hooks.Salary = append(c.hooks.Salary, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `salary.Intercept(f(g(h())))`.
func (c *SalaryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Salary = append(c.inters.Salary, interceptors...)
}

// Create returns a builder for creating a Salary entity.
func (c *SalaryClient) Create() *SalaryCreate {
	mutation := newSalaryMutation(c.config, OpCreate)
	return &SalaryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Salary entities.
func (c *SalaryClient) CreateBulk(builders ...*SalaryCreate) *SalaryCreateBulk {
	return &SalaryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SalaryClient) MapCreateBulk(slice any, setFunc func(*SalaryCreate, int)) *SalaryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SalaryCreateBulk{err: fmt.Errorf("calling to SalaryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SalaryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SalaryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Salary.
func (c *SalaryClient) Update() *SalaryUpdate {
	mutation := newSalaryMutation(c.config, OpUpdate)
	return &SalaryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SalaryClient) UpdateOne(s *Salary) *SalaryUpdateOne {
	mutation := newSalaryMutation(c.config, OpUpdateOne, withSalary(s))
	return &SalaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SalaryClient) UpdateOneID(id string) *SalaryUpdateOne {
	mutation := newSalaryMutation(c.config, OpUpdateOne, withSalaryID(id))
	return &SalaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Salary.
func (c *SalaryClient) Delete() *SalaryDelete {
	mutation := newSalaryMutation(c.config, OpDelete)
	return &SalaryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SalaryClient) DeleteOne(s *Salary) *SalaryDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SalaryClient) DeleteOneID(id string) *SalaryDeleteOne {
	builder := c.Delete().Where(salary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SalaryDeleteOne{builder}
}

// Query returns a query builder for Salary.
func (c *SalaryClient) Query() *SalaryQuery {
	return &SalaryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSalary},
		inters: c.Interceptors(),
	}
}

// Get returns a Salary entity by its id.
func (c *SalaryClient) Get(ctx context.Context, id string) (*Salary, error) {
	return c.Query().Where(salary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SalaryClient) GetX(ctx context.Context, id string) *Salary {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmployee queries the employee edge of a Salary.
func (c *SalaryClient) QueryEmployee(s *Salary) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(salary.Table, salary.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, salary.EmployeeTable, salary.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SalaryClient) Hooks() []Hook {
	return c.hooks.Salary
}

// Interceptors returns the client interceptors.
func (c *SalaryClient) Interceptors() []Interceptor {
	return c.inters.Salary
}

func (c *SalaryClient) mutate(ctx context.Context, m *SalaryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SalaryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SalaryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SalaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SalaryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Salary mutation op: %q", m.Op())
	}
}

// TitleClient is a client for the Title schema.
type TitleClient struct {
	config
}

// NewTitleClient returns a client for the Title from the given config.
func NewTitleClient(c config) *TitleClient {
	return &TitleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `title.Hooks(f(g(h())))`.
func (c *TitleClient) Use(hooks ...Hook) {
	c.hooks.Title = append(c.hooks.Title, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `title.Intercept(f(g(h())))`.
func (c *TitleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Title = append(c.inters.Title, interceptors...)
}

// Create returns a builder for creating a Title entity.
func (c *TitleClient) Create() *TitleCreate {
	mutation := newTitleMutation(c.config, OpCreate)
	return &TitleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Title entities.
func (c *TitleClient) CreateBulk(builders ...*TitleCreate) *TitleCreateBulk {
	return &TitleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TitleClient) MapCreateBulk(slice any, setFunc func(*TitleCreate, int)) *TitleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TitleCreateBulk{err: fmt.Errorf("calling to TitleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TitleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TitleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Title.
func (c *TitleClient) Update() *TitleUpdate {
	mutation := newTitleMutation(c.config, OpUpdate)
	return &TitleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TitleClient) UpdateOne(t *Title) *TitleUpdateOne {
	mutation := newTitleMutation(c.config, OpUpdateOne, withTitle(t))
	return &TitleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TitleClient) UpdateOneID(id string) *TitleUpdateOne {
	mutation := newTitleMutation(c.config, OpUpdateOne, withTitleID(id))
	return &TitleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Title.
func (c *TitleClient) Delete() *TitleDelete {
	mutation := newTitleMutation(c.config, OpDelete)
	return &TitleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TitleClient) DeleteOne(t *Title) *TitleDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TitleClient) DeleteOneID(id string) *TitleDeleteOne {
	builder := c.Delete().Where(title.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TitleDeleteOne{builder}
}

// Query returns a query builder for Title.
func (c *TitleClient) Query() *TitleQuery {
	return &TitleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTitle},
		inters: c.Interceptors(),
	}
}

// Get returns a Title entity by its id.
func (c *TitleClient) Get(ctx context.Context, id string) (*Title, error) {
	return c.Query().Where(title.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TitleClient) GetX(ctx context.Context, id string) *Title {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmployee queries the employee edge of a Title.
func (c *TitleClient) QueryEmployee(t *Title) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(title.Table, title.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, title.EmployeeTable, title.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TitleClient) Hooks() []Hook {
	return c.hooks.Title
}

// Interceptors returns the client interceptors.
func (c *TitleClient) Interceptors() []Interceptor {
	return c.inters.Title
}

func (c *TitleClient) mutate(ctx context.Context, m *TitleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TitleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TitleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TitleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TitleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Title mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Department, DeptEmployee, DeptManager, Employee, Salary, Title []ent.Hook
	}
	inters struct {
		Department, DeptEmployee, DeptManager, Employee, Salary, Title []ent.Interceptor
	}
)
