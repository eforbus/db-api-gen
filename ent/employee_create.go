// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"employees/ent/deptemployee"
	"employees/ent/deptmanager"
	"employees/ent/employee"
	"employees/ent/salary"
	"employees/ent/title"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeCreate is the builder for creating a Employee entity.
type EmployeeCreate struct {
	config
	mutation *EmployeeMutation
	hooks    []Hook
}

// SetBirthDate sets the "birth_date" field.
func (ec *EmployeeCreate) SetBirthDate(t time.Time) *EmployeeCreate {
	ec.mutation.SetBirthDate(t)
	return ec
}

// SetFirstName sets the "first_name" field.
func (ec *EmployeeCreate) SetFirstName(s string) *EmployeeCreate {
	ec.mutation.SetFirstName(s)
	return ec
}

// SetLastName sets the "last_name" field.
func (ec *EmployeeCreate) SetLastName(s string) *EmployeeCreate {
	ec.mutation.SetLastName(s)
	return ec
}

// SetGender sets the "gender" field.
func (ec *EmployeeCreate) SetGender(e employee.Gender) *EmployeeCreate {
	ec.mutation.SetGender(e)
	return ec
}

// SetHireDate sets the "hire_date" field.
func (ec *EmployeeCreate) SetHireDate(t time.Time) *EmployeeCreate {
	ec.mutation.SetHireDate(t)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EmployeeCreate) SetCreatedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableCreatedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EmployeeCreate) SetUpdatedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableUpdatedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EmployeeCreate) SetID(s string) *EmployeeCreate {
	ec.mutation.SetID(s)
	return ec
}

// AddDeptEmployeeIDs adds the "dept_employees" edge to the DeptEmployee entity by IDs.
func (ec *EmployeeCreate) AddDeptEmployeeIDs(ids ...string) *EmployeeCreate {
	ec.mutation.AddDeptEmployeeIDs(ids...)
	return ec
}

// AddDeptEmployees adds the "dept_employees" edges to the DeptEmployee entity.
func (ec *EmployeeCreate) AddDeptEmployees(d ...*DeptEmployee) *EmployeeCreate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ec.AddDeptEmployeeIDs(ids...)
}

// AddDeptManagerIDs adds the "dept_managers" edge to the DeptManager entity by IDs.
func (ec *EmployeeCreate) AddDeptManagerIDs(ids ...string) *EmployeeCreate {
	ec.mutation.AddDeptManagerIDs(ids...)
	return ec
}

// AddDeptManagers adds the "dept_managers" edges to the DeptManager entity.
func (ec *EmployeeCreate) AddDeptManagers(d ...*DeptManager) *EmployeeCreate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ec.AddDeptManagerIDs(ids...)
}

// AddSalaryIDs adds the "salaries" edge to the Salary entity by IDs.
func (ec *EmployeeCreate) AddSalaryIDs(ids ...string) *EmployeeCreate {
	ec.mutation.AddSalaryIDs(ids...)
	return ec
}

// AddSalaries adds the "salaries" edges to the Salary entity.
func (ec *EmployeeCreate) AddSalaries(s ...*Salary) *EmployeeCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ec.AddSalaryIDs(ids...)
}

// AddTitleIDs adds the "titles" edge to the Title entity by IDs.
func (ec *EmployeeCreate) AddTitleIDs(ids ...string) *EmployeeCreate {
	ec.mutation.AddTitleIDs(ids...)
	return ec
}

// AddTitles adds the "titles" edges to the Title entity.
func (ec *EmployeeCreate) AddTitles(t ...*Title) *EmployeeCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ec.AddTitleIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (ec *EmployeeCreate) Mutation() *EmployeeMutation {
	return ec.mutation
}

// Save creates the Employee in the database.
func (ec *EmployeeCreate) Save(ctx context.Context) (*Employee, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmployeeCreate) SaveX(ctx context.Context) *Employee {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmployeeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmployeeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmployeeCreate) check() error {
	if _, ok := ec.mutation.BirthDate(); !ok {
		return &ValidationError{Name: "birth_date", err: errors.New(`ent: missing required field "Employee.birth_date"`)}
	}
	if _, ok := ec.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "Employee.first_name"`)}
	}
	if _, ok := ec.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "Employee.last_name"`)}
	}
	if _, ok := ec.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "Employee.gender"`)}
	}
	if v, ok := ec.mutation.Gender(); ok {
		if err := employee.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Employee.gender": %w`, err)}
		}
	}
	if _, ok := ec.mutation.HireDate(); !ok {
		return &ValidationError{Name: "hire_date", err: errors.New(`ent: missing required field "Employee.hire_date"`)}
	}
	return nil
}

func (ec *EmployeeCreate) sqlSave(ctx context.Context) (*Employee, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Employee.ID type: %T", _spec.ID.Value)
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EmployeeCreate) createSpec() (*Employee, *sqlgraph.CreateSpec) {
	var (
		_node = &Employee{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(employee.Table, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.BirthDate(); ok {
		_spec.SetField(employee.FieldBirthDate, field.TypeTime, value)
		_node.BirthDate = value
	}
	if value, ok := ec.mutation.FirstName(); ok {
		_spec.SetField(employee.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := ec.mutation.LastName(); ok {
		_spec.SetField(employee.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := ec.mutation.Gender(); ok {
		_spec.SetField(employee.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := ec.mutation.HireDate(); ok {
		_spec.SetField(employee.FieldHireDate, field.TypeTime, value)
		_node.HireDate = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(employee.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ec.mutation.DeptEmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptEmployeesTable,
			Columns: []string{employee.DeptEmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptemployee.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.DeptManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DeptManagersTable,
			Columns: []string{employee.DeptManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deptmanager.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.SalariesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalariesTable,
			Columns: []string{employee.SalariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salary.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TitlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TitlesTable,
			Columns: []string{employee.TitlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(title.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmployeeCreateBulk is the builder for creating many Employee entities in bulk.
type EmployeeCreateBulk struct {
	config
	err      error
	builders []*EmployeeCreate
}

// Save creates the Employee entities in the database.
func (ecb *EmployeeCreateBulk) Save(ctx context.Context) ([]*Employee, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Employee, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) SaveX(ctx context.Context) []*Employee {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmployeeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
